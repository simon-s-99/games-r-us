@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data;
@using games_r_us_source.Components.Bid;
@using games_r_us_source.Components.Helpers;
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory;
@inject AuthenticationStateProvider AuthenticationStateProvider


<article class="font-[Kadwa] border-blue-800 bg-gray-200 p-4 m-auto flex h-fit w-1/2 flex-col rounded-2xl border-2 text-center md:flex-row" @onclick:stopPropagation="true">
    <!-- checks if user is logged in & the listings owner to display edit/delete button -->
    <AuthorizeView>
        <Authorized>
            @if (IsOwner)
            {
                <ListingDelete ListingID="@CurrentListing.ID" />
                <ListingEdit Listing="@CurrentListing" HighestBid="@HighestBid" />
            }
        </Authorized>
    </AuthorizeView>

    <img class="mb-6 mr-2 rounded object-contain drop-shadow-2xl xl:object-cover md:w-1/2 md:mb-0" src="@($"/images/{CurrentListing.ImagePath}")" alt="@CurrentListing.Name" />

    <div class="pl-2 md:w-1/2">
        <span class="text-gray-800">
            In
        </span>

        <!-- TODO: Add breadcrumb navigation when search/filter functionality works -->
        <button class="text-blue-700 underline" @onclick="() => Search(CurrentListing.Platform, null)">
            @CurrentListing.Platform
        </button>

        @if (CurrentListing.GameCategory != null)
        {
            <span class="text-gray-800"> > </span>
            <button class="text-blue-700 underline" @onclick="() => Search(null, CurrentListing.GameCategory)">
                @CurrentListing.GameCategory
            </button>
        }

        <div class="mt-10 flex h-1/2 flex-col justify-between">
            <h3 class="text-2xl font-bold uppercase">@CurrentListing.Name</h3>

            <div class="mt-8 flex flex-col justify-evenly md:flex-row">
                <div>
                    @if (HighestBid != null)
                    {
                        <p>Highest bid at </p> <span class="font-bold">$@HighestBid.Amount</span>
                    }
                    else
                    {
                        <p>Starting at </p>

                        <span class="font-bold">$@CurrentListing.StartingPrice</span>
                    }
                </div>

                <!-- Vertical divider -->
                <div class="border-r-2 hidden border-gray-400 md:block"></div>

                <!-- Show tooltip on hover -->
                <div class="group relative mt-4 inline-block cursor-help md:mt-0">
                    @* Below code needed as timer does not call method to set time to "ended" when it runs out *@
                    <p>Ends in</p>

                    @if (CurrentListing.AuctionEnd < DateTime.Now)
                    {

                        <span class="border-b-2 border-dotted border-black text-red-700">ended</span>
                    }
                    else
                    {
                        <span class="border-b-2 border-dotted border-black text-red-700">@TimeRemaining</span>
                    }

                    <span class="-ml-[70%] invisible absolute bottom-full left-1/2 w-fit text-nowrap rounded bg-black text-white opacity-70 group-hover:visible">@CurrentListing.AuctionEnd</span>
                </div>
            </div>


            <section class="mt-8">
                <!-- If description is too long, put it in a details element instead -->
                @if (CurrentListing.Description is not null && CurrentListing.Description.Length > 200)
                {
                    <details class="text-left"><summary>Description</summary>@CurrentListing.Description</details>
                }
                else if (CurrentListing.Description is not null)
                {
                    <h4 class="font-bold">Description</h4>
                    <p class="text-left">@CurrentListing.Description</p>
                }
            </section>

            @* 
               ApplicationUser gets reset when component rerenders, and OnInitalized does not get called for some reason 
               This is kind of ugly, but it ensures that ApplicationUser always gets a value
            *@
            @if (CurrentListing.ApplicationUser is null && CurrentListing.ApplicationUserID is not null)
            {
                using (var dbContext = dbContextFactory.CreateDbContext())
                {
                    CurrentListing.ApplicationUser = ApplicationUserHelper.GetAccountFromUserID(CurrentListing.ApplicationUserID, dbContext);
                }
            }

            <section class="border-b-2 mb-4 mt-8 border-black pb-4">
                <h4 class="font-bold">Seller</h4>
                <p>
                    @CurrentListing.ApplicationUser?.FullName
                </p>
                Phone:
                <a class="text-blue-700 underline" href="tel:@CurrentListing.ApplicationUser?.PhoneNumber">
                    @CurrentListing.ApplicationUser?.PhoneNumber
                </a>
            </section>

            <!-- disables place bid functionality if user is the owner of the listing -->
            <AuthorizeView>
                <Authorized>
                    @if (!IsOwner)
                    {
                        <BidPlaceForm CurrentListing="CurrentListing" HighestBid="HighestBid" />
                    }
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</article>


@code {
    [Parameter]
    public Listing CurrentListing { get; set; }

    [Parameter] // exposes our callback in Home.razor so that displayed listings are updated
    public EventCallback<List<Listing>> OnSearchResultsUpdated { get; set; }

    private Bid? HighestBid { get; set; }

    private bool IsOwner { get; set; } = false;

    private string TimeRemaining { get; set; } = "";

    Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            CurrentListing.ApplicationUser = ApplicationUserHelper.GetAccountFromUserID(CurrentListing.ApplicationUserID, dbContext);
            HighestBid = BidHelper.GetHighestBidFromListingID(CurrentListing.ID, dbContext);
        }

        await CheckOwnership();
    }

    protected override void OnInitialized()
    {
        TimeSpan timeDifference = CurrentListing.AuctionEnd - DateTime.Now;

        // Only initalize timer if there are less than 24 hours remaining, to prevent performance issues
        if (CurrentListing.AuctionEnd > DateTime.Now || timeDifference.TotalDays < 1)
        {
            // Create timer that updates every 1000 milliseconds
            timer = new Timer(UpdateTime, null, 1000, 1000);
        }
    }

    private void UpdateTime(object _)
    {
        // Method is called when timer updates, updates the TimeRemaining variable
        TimeRemaining = ListingHelper.GetTimeDifference(CurrentListing.AuctionEnd);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Releases the timer when it runs out
        timer?.Dispose();
    }

    private async Task CheckOwnership()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;

        if (userName is not null)
        {
            using (var dbContext = dbContextFactory.CreateDbContext())
            {
                IsOwner = ApplicationUserHelper.IsUserListingOwner(userName, CurrentListing, dbContext);
            }
        }
    }
    
    // Perform the same search as in ListingSearch, but leave out the query
    private async Task Search(Platform? platform, GameCategory? category)
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var query = dbContext.Listings.AsQueryable();

            if (platform.HasValue)
            {
                query = query.Where(l => l.Platform == platform);
            }

            if (category.HasValue)
            {
                query = query.Where(l => l.GameCategory == category);
            }

            var filteredListings = await query.ToListAsync();
            await OnSearchResultsUpdated.InvokeAsync(filteredListings); // triggers the event callback
        }
    }
}
