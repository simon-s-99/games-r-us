@rendermode InteractiveServer

@using games_r_us_source.Data
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@page "/search"

<div class="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">
    <div class="flex gap-4">
        <div class="flex-1">
            <InputText class="form-input w-full rounded-lg border-gray-300 shadow-sm"
                       @bind-Value="searchText"
                       @oninput="OnInputChanged" placeholder="Search..." maxlength="50" />
        </div>
        <div class="w-48">
            <select @bind="platform" class="form-select w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Platforms</option>
                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                {
                    <option value="@platform">@platform.ToString()</option>
                }
            </select>
        </div>
        <div class="w-48">
            <select @bind="category" class="form-select w-full rounded-lg border-gray-300 shadow-sm">

                <option value="">All Categories</option>
                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                {
                    <option value="@category">@category.ToString()</option>
                }
            </select>
        </div>
    </div>
</div>

@code {
    private string searchText;
    private Platform? platform = null;
    private GameCategory? category = null;

    protected override async Task OnInitializedAsync()
    {
        // do shit when component is rendered
    }

    // firstRender parameter is needed for correct override even if it is not used in the method
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // do shit when StateHasChanged() has been called
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString() ?? string.Empty;

        await ApplyFilters(searchText, platform, category);
        StateHasChanged();
    }

    private async Task ApplyFilters(string searchText, Platform? platform, GameCategory? category)
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var query = dbContext.Listings.AsQueryable();

            // Get input from search, and fetch similar listings names, and descriptions
            if (!string.IsNullOrEmpty(searchText))
            {
                query = query.Where(l => EF.Functions
                    .Like(l.Name, $"%{searchText}%") 
                    ||
                    EF.Functions.Like(l.Description, $"%{searchText}%"));
            }

            if (platform.HasValue)
            {
                query = query.Where(l => l.Platform == platform.Value);
            }

            if (category.HasValue)
            {
                query = query.Where(l => l.GameCategory == category.Value);
            }

            //filteredListings = await query.ToListAsync();
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Listing>> SearchListings(string searchText)
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            return await dbContext.Listings
                .Where(l => EF.Functions.Like(l.Name, $"%{searchText}%"))
                .ToListAsync();
        }
    }
}
