@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using games_r_us_source.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set password</PageTitle>

<h3 class="text-l mt-3 font-semibold">Set your password</h3>

<StatusMessage Message="@message" />
<p class="mb-3.5 mt-3.5 italic">
    <span class="rounded border border-gray-400 px-1 py-0.5">
        You do not have a local username/password for this site. 
        Add a local account so you can log in without an external login.
    </span>
</p>

<div>
    <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <label>New password: 
                <InputText type="password" @bind-Value="Input.NewPassword" class="border border-black" autocomplete="new-password" placeholder="Enter new password..." />
                <ValidationMessage For="() => Input.NewPassword" />
            </label>
        </div>
        <div class="form-floating mb-3">
            <label>Confirm password: 
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="border border-black" autocomplete="new-password" placeholder="Confirm new password..." />
                <ValidationMessage For="() => Input.ConfirmPassword" />
            </label>
        </div>
        <button type="submit" class="mt-3 rounded-xl bg-green-500 px-3 py-2 hover:bg-green-300">Set password</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}
