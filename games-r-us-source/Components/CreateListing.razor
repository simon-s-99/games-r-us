@page "/createListing"
@using Microsoft.AspNetCore.Components.Forms
@using games_r_us_source.Models
@using games_r_us_source.Data
@using System.Net.Http
@using System
@using System.Text
@using System.Linq
@using Microsoft.EntityFrameworkCore

@inject IConfiguration config
@rendermode InteractiveServer
@inject AppDbContext dbContext
@inject IDbContextFactory<AppDbContext> dbContextFactory

<AuthorizeView>

    <button @onclick="ShowModal" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">Create a listing</button>
</AuthorizeView>

@if (IsVisible)
{
    <div class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <EditForm Model="@listing" OnValidSubmit="HandleValidSubmit">
                <div class="relative">
                    @if (base64Image != null)
                    {
                        <img src="@base64Image" alt="Listing Image" class="mx-auto w-48 h-48 object-cover rounded-md">
                    }
                    <label class="absolute right-2 top-2 cursor-pointer text-sm bg-gray-300 hover:bg-gray-400 text-black rounded-full p-2">
                        Add Image
                        <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                    </label>
                    <ul class="error-messages p-2">
                        @foreach (var error in errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            

            <div class="text-center mt-4">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Create a Listing</h3>
                @* <EditForm Model="@listing" OnValidSubmit="HandleValidSubmit"> *@
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <ul class="space-y-4 mt-3">
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Name:</label>
                            <InputText id="name" @bind-Value="listing.Name" class="input-field mt-1 block w-full" 
                            placeholder="Name of your listing" min="1"/>
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Starting price:</label>
                            <InputNumber id="startingPrice" @bind-Value="listing.StartingPrice" class="input-field mt-1 block w-full"
                            placeholder="Starting Price" min="1"/>
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Description:</label>
                            <InputTextArea id="description" @bind-Value="listing.Description" class="input-field mt-1 block w-full"
                            placeholder="Description" maxlength="100" />
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">End date for Auction:</label>
                            <input type="datetime-local" id="auctionEnd" @bind="listing.AuctionEnd" class="input-field mt-1 block w-full"
                                   min="@DateTime.Now.ToString("yyy-MM-ddTHH:mm")" /> @* Disables the user from setting a negative date  *@
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Platform:</label>
                            <InputSelect id="platform" @bind-Value="listing.Platform" class="input-field mt-1 block w-full">
                                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                                {
                                    <option value="@platform">@platform</option>
                                }
                            </InputSelect>
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Game Category:</label>
                            <InputSelect id="gameCategory" @bind-Value="listing.GameCategory" class="input-field mt-1 block w-full">

                                <option value="null">None</option> @* None as an option in case the listing is a console *@

                                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </li>
                    </ul>
                    <button type="submit" @onclick="HandleValidSubmit" class="mt-4 px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded">Submit</button>
                    <button type="button" @onclick="ShowConfirmCancel" class="mt-4 ml-2 px-4 py-2 bg-red-500 hover:bg-red-700 text-white font-bold rounded">Cancel</button>
                @* </EditForm> *@
            </div>
            </EditForm>
        </div>
    </div>

    @if (showConfirmation)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white p-4 rounded">
                <h2 class="text-lg">Are you sure you want to cancel?</h2>
                <button class="mr-2 px-4 py-2 bg-green-500 text-white rounded" @onclick="ConfirmCancel">Yes</button>
                <button class="px-4 py-2 bg-red-500 text-white rounded" @onclick="HideConfirmCancel">No</button>
            </div>
        </div>
    }
}

@if (listings.Any())
{
    <div class="mt-4">
        <h2 class="text-lg font-semibold text-gray-800">Listings:</h2>
        @for (int i = 0; i < listings.Count; i++)
        {
            <section class="p-3 border rounded mt-2">
                <h3 class="text-md font-semibold">@listings[i].Name</h3>
                <img src="@($"/Storage/{listings[i].ImagePath}")" alt="Listing Image" class="w-48 h-48 object-cover rounded-md">
                <p>Price: @prices[i] kr </p>
                <p>Description: @listings[i].Description</p>
                <p>Time Remaining: @GetTimeDifference(listings[i].AuctionEnd)</p>
                <p>Platform: @listings[i].Platform.ToString()</p>
                <p>Category: @listings[i].GameCategory?.ToString()</p>
            </section>
        }
    </div>
}




@code {
    //private Listing listings = new Listing();
    //private Listing newListing = new Listing();
    Listing listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7) };
    private List<Listing> listings = new List<Listing>();

    private string imagePath;
    private bool isImageUploaded = false;

    // file size set to 3MB
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 1; // In case we ever want to allow more than one image
    private List<string> errors = new();

    private IBrowserFile? file;

    private string base64Image; // For immediate display
    private string serverImagePath; // For server storage and retrieval

    private async Task HandleValidSubmit()
    {
        using var dbContext = dbContextFactory.CreateDbContext();
        // if (!isImageUploaded)
        // {
        //     errors.Add("Please upload an image of your listing");
        //     return;
        // }

        dbContext.Listings.Add(listing);
        try
        {
            await dbContext.SaveChangesAsync();
            //await LoadListings();
            CloseModal();
        }
        catch (DbUpdateException ex)
        {
            // Here we log the inner exception which usually contains the details about database errors
            var errorDetails = ex.InnerException != null ? ex.InnerException.Message : "No inner exception information";
            errors.Add($"Error: {ex.Message}. Details: {errorDetails}");
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

    private List<decimal> prices = new();

    private async Task LoadPrices()
    {
        prices.Clear();
        foreach (var listing in listings)
        {
            var price = await GetCurrentBid(listing.ID);
            prices.Add(price);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        listings = await dbContext.Listings.ToListAsync();

        // Let the task of fetching the price complete, else it displays "System.Runtime.CompilerServices"
        await LoadPrices();        
        //await LoadListings();
    }

    //Loadlistings and loadprices doesn't seem to work at the same time

    // private async Task LoadListings()
    // {
    //     listings = await dbContext.Listings.ToListAsync();
    // }

    private async Task<decimal> GetCurrentBid(int listingID)
    {
        using var dbContext = dbContextFactory.CreateDbContext();
        var highestBid = await dbContext.Bids
                            .Where(b => b.ListingID == listingID)
                            .OrderByDescending(b => b.Amount)
                            .FirstOrDefaultAsync();

        var listing = await dbContext.Listings
                            .FirstOrDefaultAsync(l => l.ID == listingID);

        if (listing == null)
        {
            throw new InvalidOperationException($"No listing found with ID {listingID}.");
        }

        return highestBid != null && highestBid.Amount > listing.StartingPrice
               ? highestBid.Amount
               : listing.StartingPrice;
    }

    // private async Task LoadListings()
    // {
    //     using var dbContext = dbContextFactory.CreateDbContext();
    //     listings = await dbContext.Listings.ToListAsync();
    // }

    // private async Task<decimal> GetCurrentBid(int listingID)
    // {
    //     using var dbContext = dbContextFactory.CreateDbContext();
    //     var highestBid = await dbContext.Bids
    //                         .Where(b => b.ListingID == listingID)
    //                         .OrderByDescending(b => b.Amount)
    //                         .FirstOrDefaultAsync();

    //     var listing = await dbContext.Listings
    //                         .FirstOrDefaultAsync(l => l.ID == listingID);

    //     if (listing == null)
    //     {
    //         throw new InvalidOperationException($"No listing found with ID {listingID}.");
    //     }

    //     return highestBid != null && highestBid.Amount > listing.StartingPrice
    //            ? highestBid.Amount
    //            : listing.StartingPrice;
    // }
    
    // private async Task HandleValidSubmit()
    // {
    //     if (!isImageUploaded)
    //     {
    //         errors.Add("Please upload a image of your listing");
    //         return;
    //     }


    //     //listing.ImagePath = serverImagePath; //Sets the image path to the uploaded file
    //      dbContext.Listings.Add(listing);

    //     try
    //     {
    //         var entities = dbContext.ChangeTracker.Entries().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);
    //         foreach (var entity in entities)
    //         {
    //             Console.WriteLine($"Entity: {entity.Entity.GetType().Name}, State: {entity.State}");
    //         }


    //         await dbContext.SaveChangesAsync();
    //         await LoadListings();
    //         CloseModal();
    //     }
    //     catch (DbUpdateException ex)
    //     {
    //         var sb = new StringBuilder();
    //         sb.AppendLine($"Error saving changes: {ex.Message}");
    //         if (ex.InnerException != null)
    //             sb.AppendLine($"Inner exception: {ex.InnerException.Message}");

    //         errors.Add(sb.ToString());
    //     }
    //     catch (Exception ex)
    //     {
    //         errors.Add($"Error: {ex.Message}");
    //     }

        
    // }

    


    // private decimal GetCurrentBid(int listingID)
    // {
    //     Fetch the highest bid for the listing
    //     var highestBid = dbContext.Bids
    //     .Where(b => b.ListingID == listingID)
    //     .OrderByDescending(b => b.Amount)
    //     .FirstOrDefault();

    //     Fetch the listing to obtain the starting price
    //     var listing = dbContext.Listings.FirstOrDefault(l => l.ID == listingID);

    //     if (listing == null)
    //     {
    //         Log this issue, throw an exception, or handle it according to your application needs
    //         throw new InvalidOperationException($"No listing found with ID {listingID}.");
    //     }

    //     check if there's been at least one bid
    //     if (highestBid != null && highestBid.Amount > listing.StartingPrice)
    //     {
    //         return highestBid.Amount;
    //     }

    //     else
    //     {
    //         return listing.StartingPrice; System.NullReferenceException: 'Object reference not set to an instance of an object.'

    //     }
    // }

    // Used to set the end time of a listing
    private string auctionEnd
    {
        get => listing.AuctionEnd.ToString("yyyy-MM-ddTHH:mm");
        set
        {
            if (DateTime.TryParse(value, out var newDate))
            {
                listing.AuctionEnd = newDate;
            }
        }
    }

    private async Task SubmitForm()
    {
        try
        {
            string relativePath = await CaptureFile();
            listing.ImagePath = relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null && imageFile.Size > 0)
        {
            MemoryStream ms = new MemoryStream();
            try
            {
                await imageFile.OpenReadStream(maxFileSize).CopyToAsync(ms);
                byte[] buffer = ms.ToArray();
                base64Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}"; // Displaying the image immediately in UI
                isImageUploaded = true;

                string fileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(imageFile.Name));
                string folderPath = Path.Combine(config.GetValue<string>("FileStorage"), "Listings");
                Directory.CreateDirectory(folderPath); // Ensures directory exists

                string fullPath = Path.Combine(folderPath, fileName);
                await File.WriteAllBytesAsync(fullPath, buffer); // Saves the image to the server directory

                listing.ImagePath = fullPath; // save fullpath to imagePath
                dbContext.Listings.Add(listing); // adding imagePath here for now

                //serverImagePath = fullPath; // Saves the path for database entry
            }
            catch (Exception ex)
            {
                errors.Add($"Error uploading image: {ex.Message}");
            }
        }
    }


    // private async Task LoadFiles(InputFileChangeEventArgs e)
    // {
    //     errors.Clear();
    //     var imageFile = e.File;
    //     if (imageFile != null)
    //     {
    //         MemoryStream ms = new MemoryStream();
    //         try
    //         {
    //             await imageFile.OpenReadStream(maxFileSize).CopyToAsync(ms);
    //             var buffer = ms.ToArray();
    //             var format = "image/png"; // Determine based on the file type
    //             base64Image = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    //             isImageUploaded = true;

    //             string newFileName = Path.ChangeExtension(
    //                 Path.GetRandomFileName(),
    //                 Path.GetExtension(imageFile.Name));

    //             string folderPath = Path.Combine(config.GetValue<string>("FileStorage")!, "Listings");
    //             Directory.CreateDirectory(folderPath);

    //             string fullPath = Path.Combine(folderPath, newFileName);
    //             ms.Seek(0, SeekOrigin.Begin);
    //             await using FileStream fs = new FileStream(fullPath, FileMode.Create);
    //             await ms.CopyToAsync(fs);

    //             serverImagePath = Path.Combine("Listings", newFileName);
    //         }
    //         catch (Exception ex)
    //         {
    //             errors.Add($"Error: {ex.Message}");
    //         }
    //         finally
    //         {
    //             ms.Dispose();
    //         }
    //     }
    // }


    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }
        try
        {
            // Gets the extension of the file name the user passes in
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage")!,
                "Listings",
                newFileName);

            string relativePath = Path.Combine("Listings", newFileName);

            Directory.CreateDirectory(Path.Combine(
                config.GetValue<string>("FileStorage")!,
            "Listings"));

            // using closes by itself when reaching the end of the method
            await using FileStream fs = new(path, FileMode.Create);
            // copy the file to the currently open filestream
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
    }

    private bool IsVisible;
    private bool showConfirmation;

    private void ShowConfirmCancel() => showConfirmation = true;

    private void HideConfirmCancel()
    {
        showConfirmation = false;
    }

    private void ConfirmCancel()
    {
        showConfirmation = false;
        IsVisible = false;
        errors.Clear();
    }

    public void ShowModal()
    {
        listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7), StartingPrice = 1 };
        base64Image = null;
        serverImagePath = null;
        isImageUploaded = false;
        errors.Clear();
        IsVisible = true;
    }

    public void CloseModal()
    {
        listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7), StartingPrice = 1 };
        base64Image = null;
        serverImagePath = null;
        isImageUploaded = false;
        errors.Clear();
        IsVisible = false;
    }

    private string GetTimeDifference(DateTime endDate)
    {
        TimeSpan timeDifference = endDate - DateTime.Now;

        if (timeDifference.TotalDays >= 7)
        {
            return $"{Math.Floor(timeDifference.TotalDays / 7)} weeks";
        }
        else if (timeDifference.TotalDays >= 1)
        {
            return $"{Math.Floor(timeDifference.TotalDays)} days";
        }
        else if (timeDifference.TotalHours >= 1)
        {
            return $"{Math.Floor(timeDifference.TotalHours)} hours";
        }
        else
        {
            return $"{Math.Floor(timeDifference.TotalMinutes)} minutes";
        }
    }


    // private async Task LoadFiles(InputFileChangeEventArgs e)
    // {
    //     //file = e.File;
    //     var imageFile = e.File;
    //     if (imageFile != null)
    //     {
    //         // Convert the image to a base64 string to display in an <img> tag
    //         var format = "image/png";
    //         using (var ms = new MemoryStream())
    //         {
    //             await imageFile.OpenReadStream(maxFileSize).CopyToAsync(ms);
    //             var buffer = ms.ToArray();
    //             imagePath = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    //             isImageUploaded = true;
    //         }
    //     }

    // }


    // private async Task LoadFiles(InputFileChangeEventArgs e)
    // {
    //     errors.Clear();
    //     var files = e.GetMultipleFiles(maxAllowedFiles);
    //     if (files.Count > maxAllowedFiles)
    //     {
    //         errors.Add($"Error: Attempting to upload {files.Count} files, but only {maxAllowedFiles} files are allowed");
    //         return;
    //     }

    //     var file = files.FirstOrDefault();
    //     if (file != null)
    //     {
    //         try
    //         {
    //             string newFileName = Path.ChangeExtension(
    //                 Path.GetRandomFileName(),
    //                 Path.GetExtension(file.Name));

    //             string folderPath = Path.Combine(config.GetValue<string>("FileStorage")!, "Listings");
    //             Directory.CreateDirectory(folderPath); // Ensure the directory exists

    //             string fullPath = Path.Combine(folderPath, newFileName);
    //             await using FileStream fs = new(fullPath, FileMode.Create);
    //             await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

    //             // Here, instead of setting imagePath to a local path, you would store the relative path in the database and serve it via a controller if outside wwwroot.
    //             imagePath = fullPath; // Temporary for local display, you would normally store and serve these files differently.
    //             isImageUploaded = true;

    //             // Trigger UI update
    //             StateHasChanged();
    //         }
    //         catch (Exception ex)
    //         {
    //             errors.Add($"File upload failed: {ex.Message}");
    //         }
    //     }
    // }

}

