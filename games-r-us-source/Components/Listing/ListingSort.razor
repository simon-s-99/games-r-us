@rendermode InteractiveServer
@using games_r_us_source.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@page "/sort"

<h3>Sort by</h3>

<select @bind="SelectedSortOrder" @oninput="ApplySort">
    <option value="PriceAscending">Price ascending</option>
    <option value="PriceDescending">Price descending</option>
    <option value="Alphabetically">Alphabetically</option>
    <option value="DateAscending">Listing end date ascending</option>
    <option value="DateDescending">Listing end date descending</option>
</select>



@code {
    [Parameter]
    public Listing Listing { get; set; } //for listings

    [Parameter]
    public Bid? HighestBid { get; set; } //For prices

    [Parameter]
    public EventCallback<List<Listing>> OnSortResultsUpdated { get; set; }

    private string SelectedSortOrder { get; set; } = "PriceAscending";

    private async void ApplySort()
    {
        using var dbContext = dbContextFactory.CreateDbContext();

        // Fetch the listings along with their maximum price, either from the highest bid or the startingPrice
        var ListingHighestPrice = await dbContext.Listings.Select(l => new
        {
            // For each listing "l", we create an anonymous object containing the listings itself
            // and the calculated MaxPrice
            Listing = l,
            MaxPrice = dbContext.Bids
            .Where(b => b.ListingID == l.ID)
            .OrderByDescending(b => b.Amount).Select(b => (decimal?)b.Amount)
            .FirstOrDefault() ?? l.StartingPrice

        }).ToListAsync();


        switch (SelectedSortOrder)
        {
            case "PriceAscending":
                ListingHighestPrice = ListingHighestPrice.OrderBy(x => x.MaxPrice).ToList();
                break;
            case "PriceDescending":
                ListingHighestPrice = ListingHighestPrice.OrderByDescending(x => x.MaxPrice).ToList();
                break;
            case "Alphabetically":

                break;
            case "DateAscending":

                break;
            case "DateDescending":

                break;
        }

        var sortedListings = ListingHighestPrice.Select(x => x.Listing).ToList();
        await OnSortResultsUpdated.InvokeAsync(sortedListings);
    }
}