@using games_r_us_source.Data;
@using games_r_us_source.Components.Helpers;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext;

<AuthorizeView Context="authorizeViewContext">
    <Authorized>
        <p class="font-bold text-red-600">@ErrorMessage</p>
        <EditForm class="m-auto max-w-full" Model="@bid" OnValidSubmit="HandleSubmit" FormName="placeBidForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="amount" class="block text-center">
                New bid
            </label>
            <div class="border-2 flex flex-col border-black md:flex-row">
                <InputNumber id="amount" class="w-full flex-grow" @bind-Value="@bid.Amount" />
                <button class="bg-green-500" type="submit">Place bid</button>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>You need to be logged in to place a bid.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int ListingID { get; set; }

    private string UserName { get; set; }

    private string ErrorMessage { get; set; }

    Bid bid = new Bid { Time = DateTime.Now };

    private void HandleSubmit()
    {
        decimal highestBid = GetHighestBidAmountForCurrentListing(ListingID);
        if (highestBid >= bid.Amount)
        {
            ErrorMessage = "Bid amount is too low.";
            return;
        }

        bid.ListingID = ListingID;
        bid.Listing = ListingHelper.GetListingFromListingID(ListingID, dbContext);

        ApplicationUser user = AccountHelper.GetAccountFromUserName(UserName, dbContext);
        bid.ApplicationUserID = user.Id;
        bid.ApplicationUser = user;
        dbContext.Bids.Add(bid);
        dbContext.SaveChanges();
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Get the user's email if they are authenticated
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
        }
    }

    private decimal GetHighestBidAmountForCurrentListing(int listingID)
    {
        var listingBids = dbContext.Bids.Where(b => b.ListingID == listingID);
        decimal highestBidAmount = 0;

        // If bids for the current listing exist
        if (listingBids.Any())
        {
            highestBidAmount = listingBids.Max(b => b.Amount);
        }

        return highestBidAmount;
    }
}