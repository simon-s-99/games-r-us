@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data
@using games_r_us_source.Components.Helpers
@using games_r_us_source.Components.Listing
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<AuthorizeView>
    <Authorized>
        <button @onclick="ViewMyListings" class="bg-blue-500 px-4 py-2 text-white rounded hover:bg-blue-600">View My Listings</button>
    </Authorized>
</AuthorizeView>

@if (listings != null && listings.Any())
{
    <ul>
        @foreach (var listing in listings)
        {
            <li class="mt-4">
                <button type="button" @onclick="() => ShowListingDetails(listing)" class="text-blue-500 hover:underline">@listing.Name</button>
            </li>
        }
    </ul>
}
else if (listings != null && !listings.Any() && buttonClicked)
{
    <p class="max-w-[fit-content] mt-4 border-red-500 bg-gray-200 p-2 text-red-500 inline-block rounded border font-bold">No listings found.</p>
}
@if (selectedListing != null)
{
    <ListingDetails CurrentListing="@selectedListing" />
}

@code {
    private List<Listing> listings { get; set; }
    private bool buttonClicked = false;

    private Listing? selectedListing { get; set; }

    private void ShowListingDetails(Listing listing)
    {
        if (listing != null)
        {
            selectedListing = listing;

            StateHasChanged();
        }
        
    }

    private async Task ViewMyListings()
    {
        buttonClicked = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userName = user.Identity.Name; // Assuming the username is the email

            await using var dbContext = ContextFactory.CreateDbContext();

            // Retrieve the user's account using the helper method
            var userAccount = ApplicationUserHelper.GetAccountFromUserName(userName, dbContext);

            if (userAccount != null)
            {
                // Now that we have the user's account, fetch listings associated with that account
                listings = await dbContext.Listings
                    .Where(l => l.ApplicationUserID == userAccount.Id)
                    .ToListAsync();
            }
        }
    }
}
