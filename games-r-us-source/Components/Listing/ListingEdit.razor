@page "/listing/edit"

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using games_r_us_source.Components
@using games_r_us_source.Data

@* Enables onclick functions *@
@rendermode InteractiveServer

@* Used to redirect user to home page *@
@inject NavigationManager NavigationManager

@* Used in LoadFiles *@
@inject IWebHostEnvironment Environment

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@* Button to show the modal when editing a listing *@
  <button @onclick="() => ShowModal(ListingID)" class="bg-gray-300 px-4 py-2 text-black rounded-xl font-bold hover:bg-gray-400">Edit</button>



@if (IsVisible)
{
    <div class="inset-0 bg-gray-800 fixed flex items-center justify-center bg-opacity-75">
        <div class="bg-white p-6 w-full max-w-md rounded-lg shadow-lg">

            @* Editform used in blazor for editing a listing  *@
            <EditForm Model="@listing" OnValidSubmit="HandleValidSubmit">

                @* Here the user uploads their image *@
                <div class="relative text-center">
                    @if (base64Image != null)
                    {
                        <img src="@base64Image" alt="New Listing Image" class="h-48 w-48 mx-auto rounded-md object-cover">
                        <label class="bg-white text-gray-500 m-auto block w-full cursor-pointer rounded-l border-2 bg-clip-border transition hover:bg-gray-400">
                            Change Image
                            <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }
                    else if (listing.ImagePath != null)
                    {
                        <img src="@listing.ImagePath" alt="Existing Listing Image" class="h-48 w-48 mx-auto rounded-md object-cover">
                        <label class="bg-white text-gray-500 m-auto block w-full cursor-pointer rounded-l border-2 bg-clip-border transition hover:bg-gray-400">
                            Change Image
                            <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }
                    else
                    {
                        <label class="mt-4 border-gray-300 bg-white bg-gray-300 p-2 px-3 py-1.5 text-gray-700 text-black m-auto block inline-block w-full cursor-pointer rounded rounded-full border text-base text-sm leading-6 transition-colors duration-150 ease-in-out hover:bg-gray-400">
                            Add Image
                            <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }

                </div>

                @* Rest of the input fields *@
                <div class="mt-4 text-center">
                    <h3 class="text-gray-900 text-lg font-medium leading-6">Create a Listing</h3>

                    <DataAnnotationsValidator />
                    <ul class="mt-3 space-y-4">
                        <li>
                            @* Input for name *@
                            <label class="text-gray-700 block text-sm font-medium">Name:</label>
                            <InputText id="name" @bind-Value="listing.Name" class="input-field mt-1 block w-full"
                                       placeholder="@listing.Name" min="1" />
                            <ValidationMessage For="@(() => listing.Name)" class="text-red-500 text-xs mt-1" />
                        </li>
                        <li>
                            <label class="text-gray-700 block text-sm font-medium">Starting price:</label>
                            @if (!DisablePrice)
                            {
                                <InputNumber id="startingPrice" @bind-Value="listing.StartingPrice" class="input-field mt-1 block w-full"
                                             placeholder="@listing.StartingPrice" min="1" />
                                <ValidationMessage For="@(() => listing.StartingPrice)" class="text-red-500 text-xs mt-1" />
                            }
                            else  // If there has been a bid made, the user cannot edit the starting price
                            {
                                <InputNumber id="startingPrice" @bind-Value="listing.StartingPrice" class="input-field mt-1 block w-full"
                                             min="1" disabled />
                                <p class="mt-1 text-red-500 text-xs">Cannot change starting price after a bid has been made.</p>
                            }
                        </li>

                        <li>
                            @* Input for description *@
                            <label class="text-gray-700 block text-sm font-medium">Description:</label>
                            <InputTextArea id="description" @bind-Value="listing.Description" class="input-field mt-1 block w-full"
                                           placeholder="@listing.Description" maxlength="100" />
                        </li>
                        <li>
                            @* Uneditable end date *@
                            <label class="text-gray-700 block text-sm font-medium">End date for Auction:</label>
                            <input type="datetime-local" id="auctionEnd" @bind="listing.AuctionEnd" class="input-field mt-1 block w-full"
                                   min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" disabled />
                        </li>

                        <li>
                            @* Platform input (xbox, gamecube, etc.) *@
                            <label class="text-gray-700 block text-sm font-medium">Platform:</label>
                            <InputSelect id="platform" @bind-Value="listing.Platform" class="input-field mt-1 block w-full">
                                @* generate options for platforms *@
                                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                                {
                                    <option value="@platform">@platform</option>
                                }
                            </InputSelect>
                        </li>
                        <li>
                            @* Game category (fps, indie, etc.) *@
                            <label class="text-gray-700 block text-sm font-medium">Game Category:</label>
                            <InputSelect id="gameCategory" @bind-Value="listing.GameCategory" class="input-field mt-1 block w-full">

                                <option value="null">None</option> @* None as an option in case the listing is a console *@

                                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </li>
                    </ul> @* Submit and cancel buttons *@
                    <button type="submit" @onclick="HandleValidSubmit" class="mt-4 bg-blue-500 px-4 py-2 text-white rounded font-bold hover:bg-blue-700">Save changes</button>
                    <button type="button" @onclick="ShowConfirmCancel" class="ml-2 mt-4 bg-red-500 px-4 py-2 text-white rounded font-bold hover:bg-red-700">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>

    @if (showConfirmation) @* If the user presses "cancel" we show this confirmation modal *@
    {
        <div class="inset-0 bg-black fixed flex items-center justify-center bg-opacity-50">
            <div class="bg-white p-4 flex flex-col items-center rounded">
                <h2 class="mb-4 text-lg">Are you sure you want to cancel?</h2>
                <div class="space-x-4 flex justify-center">
                    <button class="bg-green-500 px-4 py-2 text-white rounded" @onclick="ConfirmCancel">Yes</button>
                    <button class="bg-red-500 px-4 py-2 text-white rounded" @onclick="HideConfirmCancel">No</button>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="inset-0 bg-black fixed flex items-center justify-center bg-opacity-50">
            <div class="bg-white p-4 flex flex-col items-center rounded">
                <h3 class="mb-4 text-lg">@successMessage</h3>
            </div>
        </div>
    }
    @foreach (var error in errors)
    {
        <div class="alert alert-danger">@error</div>
    }
}


@code {
    [Parameter]
    public int ListingID { get; set; }
    private Listing listing;

    // file size set to 3MB
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 1; // In case we ever want to allow more than one image
    private List<string> errors = new(); //displays errors in the UI

    private IBrowserFile? file; // Holds a reference to the uploaded file

    private string base64Image; // For immediate display in our ui
    private string serverImagePath; // Path where the image is stored
    private string currentImagePath;
    private DateTime lastSubmissionTime = DateTime.MinValue;
    private bool DisablePrice = false; // if true the user can edit the starting price (if no bids were made)

    private bool IsVisible;
    private bool showConfirmation;
    private string successMessage = ""; //Clears successMessage


    private async Task HandleValidSubmit()
    {
        var currentTime = DateTime.Now;

        // Check to prevent rapid successive submissions
        if ((currentTime - lastSubmissionTime).TotalSeconds < 3) 
        {
            Console.WriteLine("Please wait 3 seconds before creating another listing.");
            return; 
        }

        using var dbContext = dbContextFactory.CreateDbContext();
        var existingListing = await dbContext.Listings.FindAsync(listing.ID);

        if (existingListing != null)
        {
            // Update listing details from the edit form
            existingListing.Name = listing.Name;
            existingListing.Description = listing.Description;
            existingListing.StartingPrice = listing.StartingPrice;
            existingListing.Platform = listing.Platform;
            existingListing.AuctionEnd = listing.AuctionEnd;
            existingListing.GameCategory = listing.GameCategory;

            // Check if a new image has been uploaded and process it
            if (!string.IsNullOrEmpty(currentImagePath))
            {
                string permanentFolderPath = Path.Combine(Environment.WebRootPath, "images");
                string tempImagePath = Path.Combine(Environment.WebRootPath, "temp_images", currentImagePath);
                string permanentImagePath = Path.Combine(permanentFolderPath, currentImagePath);

                if (File.Exists(tempImagePath))
                {
                    Directory.CreateDirectory(permanentFolderPath); // ensure the permanent directory exists
                    File.Move(tempImagePath, permanentImagePath); // Move the image from temp to perm
                    existingListing.ImagePath = Path.Combine("images", currentImagePath); // Update the database
                }
                else
                {
                    Console.WriteLine("Temporary image file not found.");
                }
            }

            // Attempt to save changes to the database
            try
            {
                await dbContext.SaveChangesAsync();
                successMessage = "Changes saved successfully";
                StateHasChanged();

                await Task.Delay(2000); // Display the successMessage for 2 seconds

                successMessage = "";
                StateHasChanged();
                
                NavigationManager.NavigateTo($"/", forceLoad: true);
                lastSubmissionTime = currentTime;
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Database update failed: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An unexpected error occurred: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("No existing listing found with ID: " + listing.ID);
        }
    }
    

    // Method to handle images
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null && imageFile.Size > 0)
        {
            MemoryStream ms = new MemoryStream();
            try
            {
                // Create the existence of a temporary storage directory for images
                string tempFolderPath = Path.Combine(Environment.WebRootPath, "temp_images");
                Directory.CreateDirectory(tempFolderPath); // Ensure the directory exists


                // Delete previous image if the user changes image before submitting
                if (!string.IsNullOrEmpty(currentImagePath))
                {
                    var previousFilePath = Path.Combine(tempFolderPath, currentImagePath);
                    if (File.Exists(previousFilePath))
                    {
                        File.Delete(previousFilePath); // Delete the image if it isn't used for a listing
                    }
                }

                await imageFile.OpenReadStream(maxFileSize).CopyToAsync(ms);
                byte[] buffer = ms.ToArray();
                base64Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";

                string fileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(imageFile.Name));
                string fullPath = Path.Combine(tempFolderPath, fileName);
                await File.WriteAllBytesAsync(fullPath, buffer); // Save in temporary directory

                currentImagePath = fileName;
            }
            catch (Exception ex)
            {
                errors.Add($"Error uploading image: {ex.Message}");
            }
        }
    }

    private void ShowConfirmCancel() => showConfirmation = true;

    private void HideConfirmCancel()
    {
        showConfirmation = false;
    }

    private void ConfirmCancel()
    {
        showConfirmation = false;
        IsVisible = false;
        errors.Clear();
    }

    public async Task ShowModal(int listingId)
    {
        // Fetch the listing from the database
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            listing = await dbContext.Listings.FirstOrDefaultAsync(l => l.ID == listingId);

            if (listing == null)
            {
                Console.WriteLine("Listing not found.");
                IsVisible = false;
                return;
            }
        }

        successMessage = "";
        IsVisible = true;
    }

    public void CloseModal()
    {
        successMessage = "";
        base64Image = null;
        serverImagePath = null;
        errors.Clear();
        IsVisible = false;
    }
}
