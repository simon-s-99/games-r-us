@using games_r_us_source.Data
@using Microsoft.AspNetCore.SignalR.Client

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject NotificationState NotificationState

@implements IAsyncDisposable

<h3>NotificationBell</h3>

@code {
    private HubConnection? hubConnection;
    private readonly List<string> notifications = new List<string>();

    private void HandleNotification(NotificationDTO notificationDTO)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendNotificationTo", notificationDTO);
        }
    }

    // send is a test class that chagnes notificationstate which in turn
    // triggers a response from onchange triggering a method call to handlenotification
    private async Task Send()
    {
        NotificationState.SetNotificationDTO(new NotificationDTO("simon.t.sorqvist@gmail.com", "Success"));
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribes to changes in NotificationState class
        NotificationState.OnChange += HandleNotification;

        // Get the logged in user
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authenticationState.User.Identity.Name;

        // send the logged in users name to signalR hub so that they can recieve notifications
        if (userName is not null) // not strictly necessary but dis-allows non-logged in users from sending notifications
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/Notifications"), options =>
                {
                    // NOTE: Ideally we should do this with bearer tokens for better security.
                    //
                    // Pass username as header to our SignalR hub extension.
                    options.Headers.Add(new("UserName", userName));
                })
                .Build();

            // hubconneciton on string is only needed on pages where we actually want to display
            // notifications (so i guess on all pages, move to layout? discouraged?)
            hubConnection.On<string>("ReceiveNotificationAsync", notification =>
            {
                notifications.Add(notification);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        // Un-subscribes this component from NotificationState on dispose
        NotificationState.OnChange -= HandleNotification;
    }
}
