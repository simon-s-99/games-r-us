@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Components.Listing
@using games_r_us_source.Components.Account
@using games_r_us_source.Components.Account.CustomComponents
@using games_r_us_source.Components.Helpers
@using games_r_us_source.Data
@using games_r_us_source.Hubs

@inject NavigationManager NavigationManager

@implements IAsyncDisposable

@rendermode InteractiveServer

@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<!-- Temporary for testing purposes -->
<LoginLogoutButton />

<!-- Temporary for testing purposes -->
<ProfileButton />

<ListingCreate />

<!-- Temporary for testing purposes -->
<ListingSearch OnSearchResultsUpdated="HandleSearchResults" />


<!-- Only here as a template for how to show content if
    user is logged  in or not.
-->
<AuthorizeView>
    <Authorized>
        @* Display this content here if user is logged in *@
        @* content accesses the AuthenticationState of the logged in user *@
        @context.User.Identity.Name
    </Authorized>
    <NotAuthorized>
        @* Display this content here if user is not logged in *@
    </NotAuthorized>
</AuthorizeView>

<ListingDisplayAll listings="@listings" />

<ul>
    @foreach (string notifiaction in notifications)
    {
        <li>@notifiaction</li>
    }
</ul>

<!-- Temporary for testing purposes -->
@* <ListingDetails CurrentListing="@CurrentListing"/> *@

@code {
    private List<Listing> listings = new List<Listing>();

    private void HandleSearchResults(List<Listing> results)
    {
        listings = results; // Updates the list that is passed to ListingsDisplayAll
        StateHasChanged(); // <-- this might be unnecessary
    }

    // =================
    // testing hub
    // ==================
    private HubConnection? hubConnection;
    private readonly List<string> notifications = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/Notifications"))
            .Build();

        hubConnection.On<string>("RecieveNotification", notification =>
        {
            notifications.Add(notification);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // private async Task Send()
    // {
    //     if (hubConnection is not null)
    //     {
    //         await hubConnection.SendAsync("RecieveNotification", "testMsg");
    //     }
    // }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
