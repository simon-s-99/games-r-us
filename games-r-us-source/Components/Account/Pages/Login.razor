@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using games_r_us_source.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="border-2 m-auto mt-6 w-1/2 rounded border-black text-center">

    <h1 class="text-2xl font-bold">Log in</h1>
    <p>New to Games 'Я' Us? <NavLink class="text-blue-400" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register</NavLink></p>

    <StatusMessage Message="@errorMessage" />
    <EditForm class="flex flex-col" Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <label for="email" class="font-semibold">Email</label>
        <InputText @bind-Value="Input.Email" id="email" class="border-[1px] m-2 rounded border-black py-2" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <ValidationMessage For="() => Input.Email" class="text-danger" />
        <label for="password" class="font-semibold">Password</label>
        <InputText type="password" id="password" @bind-Value="Input.Password" class="border-[1px] m-2 rounded border-black py-2" autocomplete="current-password" aria-required="true" placeholder="password" />
        <ValidationMessage For="() => Input.Password" class="text-danger" />
        <NavLink class="m-2 text-left text-red-700" href="Account/ForgotPassword">Forgot your password?</NavLink>

        <div class="flex flex-row items-center justify-center gap-2">
            <button type="submit" class="border-[1px] rounded-xl border-black bg-green-300 p-2">Log in</button>
            <label class="form-label">
                <InputCheckbox @bind-Value="Input.RememberMe" />
                Remember me
            </label>
        </div>
    </EditForm>
    <h3>Use another service to log in.</h3>
    <ExternalLoginPicker />
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
