@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<!-- Empty html, just redirecting -->

<!-- Just nest this component wherever/whenever you need to
	redirect a user with an incomplete profile. 
-->

@code {
	private ApplicationUser user = default!;
	private string? phoneNumber;
	private string? fullName;
	private string? address;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	// Gets user phoneNr., fullName & address
	// if any of them are set to NULL (i.e. an incomplete profile)
	// send the user to the profile page 
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

		if (HttpContext is not null && authState.User.Identity.IsAuthenticated)
		{
			user = await UserAccessor.GetRequiredUserAsync(HttpContext);
			phoneNumber = await UserManager.GetPhoneNumberAsync(user);

			using (var dbContext = DbContextFactory.CreateDbContext())
			{
				// this should not result in 2 separate queries to the database since
				// current context should still be tracking the entity
				fullName = dbContext.ApplicationUsers.Find(user.Id).FullName;
				address = dbContext.ApplicationUsers.Find(user.Id).Address;
			}

			if (phoneNumber is null || fullName is null || address is null)
			{
				RedirectManager.RedirectTo("/Account/Manage");
			}
		}
	}
}
