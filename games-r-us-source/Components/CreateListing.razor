@page "/createListing"
@using Microsoft.AspNetCore.Components.Forms
@using games_r_us_source.Models
@using games_r_us_source.Data

@inject AppDbContext dbContext
@inject IJSRuntime JSRuntime

<button @onclick="ShowModal" class="button">Create your Listing</button>

@if (IsVisible)
{

    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="create-modal">
        <div class="relative top-20 mx-auto p-5 border w-11/12 sm:w-5/6 md:w-1/2 lg:w-1/3 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Create Listing</h3>
                <div class="mt-2 px-7 py-3">
                    

                    <EditForm Model="@listing" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @* Add accountId so we can connect the seller to the auction *@
                        @* fix imageurl *@
                        @*Add hours to datetime*@
                        Name: <InputText id="name" @bind-Value="listing.Name" class="input" placeholder="Name of your listing" />
                        Starting price: <InputNumber id="startingPrice" @bind-Value="listing.StartingPrice" class="input" placeholder="Starting Price" />
                        Image: <InputText id="imagePath" @bind-Value="listing.ImagePath" class="input" placeholder="Image URL" />
                        Description: <InputTextArea id="description" @bind-Value="listing.Description" class="textarea" placeholder="Description" />
                        End date for Auction: <InputDate id="auctionEnd" @bind-Value="listing.AuctionEnd" class="input" placeholder="" />
                        <InputSelect id="platform" @bind-Value="listing.Platform" class="select">
                            @foreach (var platform in Enum.GetValues(typeof(Platform)))
                            {
                                <option value="@platform">@platform</option>
                            }
                        </InputSelect>
                        <InputSelect id="gameCategory" @bind-Value="listing.GameCategory" class="select">
                            @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                            {
                                <option value="@category">@category</option>
                                //If the product is a platform this should be nullable
                            }
                        </InputSelect>

                        <button type="submit" class="submit-button">Submit</button>
                        @*  The POST request does not specify which form is being submitted. To fix this, ensure <form> elements
                          have a @formname attribute with any unique value, or pass a FormName parameter if using <EditForm>. *@
                    </EditForm>
                </div>
                <div class="items-center px-4 py-3">
                    @* prompt the user if they really want to cancel their listing *@
                    <button class="create-listing-cancel" @onclick="CloseModal">Cancel listing</button> 
                </div>
            </div>
        </div>
    </div>
}


@code {
    //Listing listing = new Listing();
    Listing listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7) };
    private string imagePath;
    private bool isImageUploaded = false;

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            var path = @"C:\Users\zaaam\OneDrive\Skrivbord\TestFolder";

            //Constructs the full file path by combining "path" with imagefile.Name
            var filePath = Path.Combine(path, imageFile.Name);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await imageFile.OpenReadStream().CopyToAsync(stream);
            }

            listing.ImagePath = filePath;
            isImageUploaded = true;
        }
    }

    //Marks IsVisible as a property that can receive its value from a parent component
    //Makes the bool into a parameter than other components can set to control the visibillity
    //Works similar as in passing props in React
    [Parameter]
    public bool IsVisible { get; set; } = true; //Currently set to true since there's a problem with showing the modal. Maybe switch to private?

    public void ShowModal()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseModal()
    {
        IsVisible = false;

        StateHasChanged();
        //JS to close the modal
        JSRuntime.InvokeVoidAsync("closeModal", "create-modal");
    }

    private async Task HandleValidSubmit()
    {
        if (!isImageUploaded)
        {
            Console.WriteLine("Please upload an image");
            return;
        }

        dbContext.Listings.Add(listing);
        await dbContext.SaveChangesAsync();
        CloseModal();
    }


}
