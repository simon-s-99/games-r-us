@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Components.Listing
@using games_r_us_source.Components.Account
@using games_r_us_source.Components.Account.CustomComponents
@using games_r_us_source.Data
@using games_r_us_source.Components.Helpers
@using games_r_us_source.Components.Layout

@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@rendermode InteractiveServer
@layout HomeLayout
@page "/"

<PageTitle>Home</PageTitle>

<!-- Temporary for testing purposes -->
@* <ListingDetails CurrentListing="@CurrentListing"/> *@
@* <ListingDetails CurrentListing="@Helpers.ListingHelper.GetListingFromListingID(2, dbContextFactory.CreateDbContext())" /> *@ @* <-- For testing purposes*@


<ListingSort OnSortResultsUpdated="HandleSorting" />

<!-- Temporary for testing purposes -->


<!-- Only here as a template for how to show content if
    user is logged  in or not.
-->
<AuthorizeView>
    <Authorized>
        @* Display this content here if user is logged in *@
        @* content accesses the AuthenticationState of the logged in user *@
    </Authorized>
    <NotAuthorized>
        @* Display this content here if user is not logged in *@
    </NotAuthorized>
</AuthorizeView>

<ListingDisplayAll listings="@listings" />

<!-- Temporary for testing purposes -->

<ListingsForUser />


@* <ListingDetails CurrentListing="@CurrentListing"/> *@

@*<ListingDetails /> @* <-- For testing purposes*@
@* <ListingDetails CurrentListing="@Helpers.ListingHelper.GetListingFromListingID(5, dbContextFactory.CreateDbContext())" />  *@


@code {
    private List<Listing> listings = new List<Listing>();

    private void HandleSearchResults(List<Listing> results)
    {
        listings = results; // Updates the list that is passed to ListingsDisplayAll
        StateHasChanged(); // <-- this might be unnecessary 
    } 
                                  
    private void HandleSorting(List<Listing> sortResults)
	{
		listings = sortResults;
		StateHasChanged();
	}
}

