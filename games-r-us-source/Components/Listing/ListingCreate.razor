@page "/listing/create"

@* Used for EditForms, InputText, number, select etc *@
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using games_r_us_source.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@* Follwing three using/injects are needed for ApplicationUserID *@
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@* It's generally recommended to use IDbContextFactory for Blazor Server applications because
it gives you more control over the creation and disposal of DbContext instances,
helping mitigate issues associated with having a DbContext that is too long-lived. *@
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@* Used in LoadFiles *@
@inject IWebHostEnvironment Environment

@* Used to fetch listings. Prices in particular *@
@inject NavigationManager NavigationManager


@* Error handling for "attacks"? eg scripts in input fields *@
@* We should do our image upload in a different way, curently the user can upload 
    images to wwwroot which is really unsafe. 
*@

<AuthorizeView>
    <Authorized>
        @* Button to show the modal for creating a new listing *@
        <button @onclick="ShowModal" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Create a listing</button>
    </Authorized>
</AuthorizeView>

@if (IsVisible)
{
    <div class="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75">
        <div class="w-full max-w-md rounded-lg bg-white p-6 shadow-lg">

            @* Editform used in blazor for creating a listing  *@
            <EditForm Model="@listing" OnValidSubmit="HandleValidSubmit">

                @* Here the user uploads their image *@
                <div class="relative text-center">
                    @if (base64Image != null)
                    {
                        <img src="@base64Image" alt="Listing Image" class="mx-auto h-48 w-48 rounded-md object-cover">
                        <label class="border-2 m-auto block cursor-pointer rounded-l bg-white bg-clip-border text-gray-500 transition hover:bg-gray-400 w-full[padding:0.375rem_0.75rem]">
                            Change Image
                            <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }
                    else
                    {
                        <label class="leading-6 m-auto mt-4 block inline-block w-full cursor-pointer rounded rounded-full border border-gray-300 bg-white bg-gray-300 p-2 px-3 py-1.5 text-base text-sm text-gray-700 text-black transition-colors duration-150 ease-in-out hover:bg-gray-400">
                            Add Image
                            <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }
                </div>

                @* Rest of the input fields *@
                <div class="mt-4 text-center">
                    <h3 class="leading-6 text-lg font-medium text-gray-900">Create a Listing</h3>

                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <ul class="mt-3 space-y-4">
                        <li> @* Input for name *@
                            <label class="block text-sm font-medium text-gray-700">Name:</label>
                            <InputText id="name" @bind-Value="listing.Name" class="input-field mt-1 block w-full"
                                       placeholder="Name of your listing" min="1" />
                        </li>
                        <li> @* Input for starting price *@
                            <label class="block text-sm font-medium text-gray-700">Starting price:</label>
                            <InputNumber id="startingPrice" @bind-Value="listing.StartingPrice" class="input-field mt-1 block w-full"
                                         placeholder="Starting Price" min="1" />
                        </li>
                        <li> @* Input for description *@
                            <label class="block text-sm font-medium text-gray-700">Description:</label>
                            <InputTextArea id="description" @bind-Value="listing.Description" class="input-field mt-1 block w-full"
                                           placeholder="Description" maxlength="100" />
                        </li>
                        <li> @* Input for end date *@
                            <label class="block text-sm font-medium text-gray-700">End date for Auction:</label>
                            <input type="datetime-local" id="auctionEnd" @bind="listing.AuctionEnd" class="input-field mt-1 block w-full"
                                   min="@DateTime.Now.ToString("yyy-MM-ddTHH:mm")" /> @* Disables the user from setting a negative date  *@
                        </li>
                        <li> @* Platform input (xbox, gamecube, etc.) *@
                            <label class="block text-sm font-medium text-gray-700">Platform:</label>
                            <InputSelect id="platform" @bind-Value="listing.Platform" class="input-field mt-1 block w-full">
                                @* generate options for platforms *@
                                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                                {
                                    <option value="@platform">@platform</option>
                                }
                            </InputSelect>
                        </li>
                        <li> @* Game category (fps, indie, etc.) *@
                            <label class="block text-sm font-medium text-gray-700">Game Category:</label>
                            <InputSelect id="gameCategory" @bind-Value="listing.GameCategory" class="input-field mt-1 block w-full">

                                <option value="null">None</option> @* None as an option in case the listing is a console *@

                                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </li>
                    </ul> @* Submit and cancel buttons *@
                    <button type="submit" @onclick="SubmitAndRefresh" class="mt-4 rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700">Submit</button>
                    <button type="button" @onclick="ShowConfirmCancel" class="ml-2 mt-4 rounded bg-red-500 px-4 py-2 font-bold text-white hover:bg-red-700">Cancel</button>       
                </div>
            </EditForm>
        </div>
    </div>
   
    @if (showConfirmation) @* If the user presses "cancel" we show this confirmation modal *@
    {
        <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
            <div class="flex flex-col items-center rounded bg-white p-4">
                <h2 class="mb-4 text-lg">Are you sure you want to cancel?</h2>
                <div class="flex justify-center space-x-4">
                    <button class="rounded bg-green-500 px-4 py-2 text-white" @onclick="ConfirmCancel">Yes</button>
                    <button class="rounded bg-red-500 px-4 py-2 text-white" @onclick="HideConfirmCancel">No</button>
                </div>
            </div>
        </div>
    }
}


@code {
    // Placeholder for a new or existing listing to be edited or created
    Listing listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7) };

    // List to store and display existing listings fetched from the database
    private List<Listing> listings = new List<Listing>();

    private bool isImageUploaded = false;

    // file size set to 3MB
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 1; // In case we ever want to allow more than one image
    private List<string> errors = new(); //displays errors in the UI

    private IBrowserFile? file; // Holds a reference to the uploaded file

    private string base64Image; // For immediate display in our ui
    private string serverImagePath; // Path where the image is stored

    // When creating a listing we submit it the the database and refresh all listings
    private async Task SubmitAndRefresh()
    {
        await HandleValidSubmit();
        await LoadListingsAndPrices();
        StateHasChanged();
    }
    private DateTime lastSubmissionTime = DateTime.MinValue;

    private async Task HandleValidSubmit()
    {
        var currentTime = DateTime.Now;
        // Used to avoid duplicates
        if ((currentTime - lastSubmissionTime).TotalSeconds < 5)
        {
            Console.WriteLine("You must wait 5 seconds before creating another listing.");
            return;
        }

        lastSubmissionTime = currentTime;

        using var dbContext = dbContextFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userID = userManager.GetUserId(user); // makes sure user isn't null
            listing.ApplicationUserID = userID;
        }

        try
        {
            dbContext.Listings.Add(listing); // Adds the new listing to the database
            await dbContext.SaveChangesAsync();

            CloseModal();
            Console.WriteLine("Listing created successfully.");
        }
        catch (DbUpdateException ex)
        {
            Console.WriteLine($"Database update failed: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    private List<decimal> prices = new();

    private async Task LoadListingsAndPrices()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var currentDate = DateTime.Now;
            listings = await dbContext.Listings
                .Where(l => l.AuctionEnd > currentDate) // Filter away expired listings
                .ToListAsync();

            prices.Clear(); // Not sure if needed
            var priceTasks = listings.Select(listing => GetCurrentBid(listing.ID)).ToList();
            prices = (await Task.WhenAll(priceTasks)).ToList();

        }

        StateHasChanged(); // Updates UI after loading listings and prices
    }

    // Lifecycle method for blazor that is called after this component
    // is initialized but before being rendered.
    protected override async Task OnInitializedAsync()
    {
        // Let the task of fetching the price complete, else it displays "System.Runtime.CompilerServices" at "price"
        await LoadListingsAndPrices();
    }

    // Fetch the current bid of the respective listing
    private async Task<decimal> GetCurrentBid(int listingID)
    {
        using var dbContext = dbContextFactory.CreateDbContext();
        var highestBid = await dbContext.Bids
                            .Where(b => b.ListingID == listingID)
                            .OrderByDescending(b => b.Amount)
                            .FirstOrDefaultAsync();

        var listing = await dbContext.Listings
                            .FirstOrDefaultAsync(l => l.ID == listingID);

        if (listing == null)
        {
            throw new InvalidOperationException($"No listing found with ID {listingID}.");
        }

        return highestBid != null && highestBid.Amount > listing.StartingPrice
               ? highestBid.Amount
               : listing.StartingPrice;
    }

    private string currentImagePath;


    // Combine Load, and CaptureFiles
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null && imageFile.Size > 0)
        {
            MemoryStream ms = new MemoryStream();
            try
            {
                // Clear the previous image from images folder if the user changes image while creating a listing
                if (!string.IsNullOrEmpty(currentImagePath))
                {
                    var previousFilePath = Path.Combine(Environment.WebRootPath, currentImagePath);
                    if (File.Exists(previousFilePath))
                    {
                        File.Delete(previousFilePath);
                    }
                }

                await imageFile.OpenReadStream(maxFileSize).CopyToAsync(ms);
                byte[] buffer = ms.ToArray();
                base64Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}"; // For immediate display in UI
                isImageUploaded = true;

                // Creating a unique file name to avoid conflicts
                string fileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(imageFile.Name));
                string folderPath = Path.Combine(Environment.WebRootPath, "images");
                Directory.CreateDirectory(folderPath);

                string fullPath = Path.Combine(folderPath, fileName);
                await File.WriteAllBytesAsync(fullPath, buffer); // Saves the image to the server directory

                string relativePath = Path.Combine("images", fileName); // Saves to the relative path
                listing.ImagePath = relativePath;
                currentImagePath = relativePath;
            }
            catch (Exception ex)
            {
                errors.Add($"Error uploading image: {ex.Message}");
            }
        }
    }


    private bool IsVisible;
    private bool showConfirmation;

    private void ShowConfirmCancel() => showConfirmation = true;

    private void HideConfirmCancel()
    {
        showConfirmation = false;
    }

    private void ConfirmCancel()
    {
        showConfirmation = false;
        IsVisible = false;
        errors.Clear();
    }

    public void ShowModal()
    {
        listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7), StartingPrice = 1 };
        base64Image = null;
        serverImagePath = null;
        isImageUploaded = false;
        errors.Clear();
        IsVisible = true;
    }

    public void CloseModal()
    {
        listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7), StartingPrice = 1 };
        base64Image = null;
        serverImagePath = null;
        isImageUploaded = false;
        errors.Clear();
        IsVisible = false;
    }
}