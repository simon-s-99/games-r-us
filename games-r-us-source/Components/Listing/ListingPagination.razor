@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data
@using games_r_us_source.Components
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@rendermode InteractiveServer

<div class="pagination-container mb-4 flex flex-wrap items-center justify-center">
    
    <button class="btn btn-primary mr-2" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>

    @for (int i = 1; i <= totalPages; i++)
    {
        int pageNumber = i;

        // Display first page number
        @if (i == 1)
        {
            <button class="btn btn-primary @(i == currentPage ? "active" : "") mr-2" @onclick="(() => ChangePage(pageNumber))">@i</button>
        }

        // Display page numbers between current page - 2 and current page + 2
        else if (i >= currentPage - 2 && i <= currentPage + 2)
        {
            <button class="btn btn-primary @(i == currentPage ? "active" : "") mr-2" @onclick="(() => ChangePage(pageNumber))">@i</button>
        }

        // Display last page number if the current page is not close to the last page
        else if (i == totalPages && currentPage <= totalPages - 3)
        {
            <button class="btn btn-primary @(i == currentPage ? "active" : "") mr-2" @onclick="(() => ChangePage(pageNumber))">@i</button>
        }

        // Display "..." before the last page number if the current page is close to the last page
        else if (i == currentPage + 3 && currentPage <= totalPages - 3)
        {
            <span class="mr-2">...</span>
        }
    }

    <button class="btn btn-primary ml-2" @onclick="NextPage" disabled="@IsLastPage">Next</button>

    <div class="ml-4 flex items-center">
        <label class="mr-2">Items per page:</label>
        <input type="number" class="form-input border-gray-300 rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" @bind="pageSize" placeholder="Enter page size" />

        <button class="btn btn-primary ml-2" @onclick="ApplyPageSize">Apply</button>
    </div>
</div>

@code {
    private List<Listing> paginatedListings = new List<Listing>();
    private int currentPage = 1;
    private int pageSize = 10; 
    private int totalListingsCount = 0;
    private int totalPages => (int)Math.Ceiling((double)totalListingsCount / pageSize);

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    [Parameter]
    public EventCallback<List<Listing>> OnPageChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPaginatedListings(currentPage, pageSize);
    }

    private async Task LoadPaginatedListings(int page, int pageSize)
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            totalListingsCount = await dbContext.Listings.CountAsync();

            paginatedListings = await dbContext.Listings
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            await LoadPaginatedListings(currentPage, pageSize);
            await OnPageChanged.InvokeAsync(paginatedListings);
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            await LoadPaginatedListings(currentPage, pageSize);
            await OnPageChanged.InvokeAsync(paginatedListings);
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadPaginatedListings(currentPage, pageSize);
            await OnPageChanged.InvokeAsync(paginatedListings);
        }
    }

    private async Task ApplyPageSize()
    {
        await LoadPaginatedListings(currentPage, pageSize);
        await OnPageChanged.InvokeAsync(paginatedListings);
    }

}



