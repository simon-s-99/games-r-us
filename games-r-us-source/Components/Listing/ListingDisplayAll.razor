@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data
@using games_r_us_source.Components.Helpers
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory
@using games_r_us_source.Components.Helpers

@* Display the listings here *@
@if (listings.Any())
{
    <div class="mt-4 px-4">
        <h2 class="text-lg font-semibold text-gray-800">Listings:</h2>
        <div class="grid-cols-1 grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var listing in listings)
            {
                <div class="relative transform transition-transform duration-300 ease-in-out @(selectedListing == listing ? "scale-95" : "")" @onclick="() => ShowListingDetails(listing)">
                    <div class="overflow-hidden rounded-lg bg-white p-4 shadow-lg">

                        <img class="h-64 w-full object-cover" src="@($"/images/{listing.ImagePath}")" alt="Image of listing">
                        <div class="p-4">
                            <h3 class="text-md font-semibold text-gray-900">@listing.Name</h3>
                            <!-- height and overflow handling for the description -->
                            <p class="h-20 overflow-hidden overflow-ellipsis text-gray-500">@listing.Description</p>
                        </div>
                        <div class="border-t border-gray-200 bg-gray-100 px-4 pb-4 pt-3">
                            <div class="text-xs font-bold uppercase tracking-wide text-gray-600">Price</div>
                            <div class="text-lg text-gray-900">$@(listing.HighestBid is null ? listing.StartingPrice : listing.HighestBid.Amount)</div>

                            @* if time is less than 1 minute, turn the Time remaining red*@
                            @if (TimeRemainingSpan[listing.ID].TotalMinutes < 1)
                            {
                                <div class="text-xs font-bold uppercase tracking-wide text-red-600">Time Remaining</div>
                                <div class="text-lg text-gray-900">@ListingHelper.GetTimeDifference(listing.AuctionEnd)</div>
                            }
                            else
                            {
                                <div class="text-xs font-bold uppercase tracking-wide text-gray-600">Time Remaining</div>
                                <div class="text-lg text-gray-900">@ListingHelper.GetTimeDifference(listing.AuctionEnd)</div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (selectedListing != null)
        {
            <article class="z-20 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50" @onclick="CloseListingDetails">
                    <ListingDetails CurrentListing="selectedListing" />
            </article>

        }
    </div>
}
else
{
    <p class="font-semibold italic">No listings found.</p>
}

@code {
    // [PAGINATION COMMENT (issue #8 on github)]
    // this will need to be restricted later to only get a certain amount of
    // listings from the database, implement when doing pagination
    [Parameter]
    public List<Listing> listings { get; set; }

    // store time remaining for each listing
    private Dictionary<int, string> TimeRemaining = new Dictionary<int, string>();

    // store time remaining as TimeSpan for each listing
    private Dictionary<int, TimeSpan> TimeRemainingSpan = new Dictionary<int, TimeSpan>();

    Timer timer;

    public bool ShowBidAsPrice = false;
    private Listing? selectedListing = null;



    // Lifecycle method for blazor that is called after this component
    // is initialized but before being rendered
    // ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    @* protected override async Task OnInitializedAsync()
    {
        using (ApplicationDbContext dbContext = dbContextFactory.CreateDbContext())
        {
            await LoadListingsAndPrices();
        }

        // Initialize the timer only if there are listings and at least one has less than 24 hours remaining
        if (listings.Any())
        {
            var earliestAuctionEnd = listings.Min(l => l.AuctionEnd);
            TimeSpan timeDifference = earliestAuctionEnd - DateTime.Now;

            if (timeDifference.TotalDays < 1)
            {
                // 1000 ms interval for regular updates. (updates every second)
                timer = new Timer(UpdateTime, null, 1000, 1000);
            }
        }
    } *@

    protected override void OnInitialized()
    {
        LoadListingsAndPrices();
    }

    // Communication with other components (search)
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    //fetch listings and their respecrtive prices
    private void LoadListingsAndPrices()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var currentDate = DateTime.Now;
            listings = dbContext.Listings
                .Where(l => l.AuctionEnd > currentDate)
                .ToList();

            foreach (var listing in listings)
            {
                var timeDifference = listing.AuctionEnd - DateTime.Now;
                TimeRemaining[listing.ID] = ListingHelper.GetTimeDifference(listing.AuctionEnd);
                TimeRemainingSpan[listing.ID] = timeDifference;
                listing.HighestBid = BidHelper.GetHighestBidFromListingID(listing.ID, dbContext);
            }
        }

        StateHasChanged();
    }

    
    private void ShowListingDetails(Listing listing)
    {
        if (selectedListing == listing)
        {
            selectedListing = null;
        }
        else
        {
            selectedListing = listing;
        }
        StateHasChanged();
    }

    private void CloseListingDetails()
    {
        selectedListing = null;
        StateHasChanged();
    }

    @* vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv *@
    @* private async Task<decimal> GetCurrentBid(int listingID)
    {
        using var dbContext = dbContextFactory.CreateDbContext();

        // Fetch highest bid for the listing
        var highestBid = await dbContext.Bids
            .Where(b => b.ListingID == listingID)
            .MaxAsync(b => (decimal?)b.Amount);

        //Return highestbid or StartingPrice if bid == null
        return highestBid ?? (await dbContext.Listings
            .Where(l => l.ID == listingID)
            .Select(l => l.StartingPrice)
            .FirstOrDefaultAsync());
    } *@

    private void UpdateTime(object _)
    {
        foreach (var listing in listings)
        {
            var timeDifference = listing.AuctionEnd - DateTime.Now;
            if (timeDifference <= TimeSpan.Zero)
            {
                TimeRemaining[listing.ID] = "Ended";
                TimeRemainingSpan[listing.ID] = TimeSpan.Zero;
            }
            else
            {
                TimeRemaining[listing.ID] = ListingHelper.GetTimeDifference(listing.AuctionEnd);
                TimeRemainingSpan[listing.ID] = timeDifference;
            }
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose(); // "?" to ensure the timer is disposed if it's not null
    }
}
