@rendermode InteractiveServer

@using games_r_us_source.Data
@using Microsoft.EntityFrameworkCore
@using System.Threading

@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@page "/search"

<div class="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">
    <form  class="flex gap-4">
        <div class="flex-1">
            <input type="text" class="w-full rounded-lg border-gray-300 shadow-sm"
                   value="@searchText"
                   @oninput="OnInputChanged"
                   @onblur="SearchDebounce" placeholder="Search..." maxlength="50" />
        </div>
        <div class="w-48">
            <select value="@platform" @oninput="SearchDebounce" class="w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Platforms</option>
                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                {
                    <option value="@platform">@platform</option>
                }
            </select>
        </div>
        <div class="w-48">
            <select value="@category" @oninput="SearchDebounce" class="w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Categories</option>
                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
    </form>
</div>

@code {
    private string searchText = string.Empty;
    private Platform? platform = null;
    private GameCategory? category = null;
    private Timer debounceTimer;

    [Parameter] // exposes our callback in Home.razor so that displayed listings are updated
    public EventCallback<List<Listing>> OnSearchResultsUpdated { get; set; }


    // This method ensures that the searchText variable is updated correctly before initiating the debounce function
    private void OnInputChanged(ChangeEventArgs e)
    {
        SearchDebounce();
    }

    // Debounce for live searching so that we do not send too many queries to the database.
    private void SearchDebounce()
    {
        if (debounceTimer is not null) { debounceTimer.Dispose(); }
        debounceTimer = new Timer(callback: TimerCallBack, null, dueTime: 300, period: Timeout.Infinite);
    }

    // new Timer() constructor only accepts callback with this format
    void TimerCallBack(object state)
    {
        InvokeAsync(async () => await ApplyFilters(searchText, platform, category));
    }

    // performs the actual search and filtering towards the database
    private async Task ApplyFilters(string searchText, Platform? platform, GameCategory? category)
    {

        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var query = dbContext.Listings.AsQueryable();

            // Get input from search, and fetch similar listings names, and descriptions
            if (!string.IsNullOrEmpty(searchText))
            {
                query = query.Where(l => EF.Functions.Like(l.Name, $"%{searchText}%")
                                       || EF.Functions.Like(l.Description, $"%{searchText}%"));
            }

            if (platform.HasValue)
            {
                query = query.Where(l => l.Platform == platform);
            }

            if (category.HasValue)
            {
                query = query.Where(l => l.GameCategory == category);
            }

            var filteredListings = await query.ToListAsync();
            await OnSearchResultsUpdated.InvokeAsync(filteredListings); // triggers the event callback
        }
    }
}
