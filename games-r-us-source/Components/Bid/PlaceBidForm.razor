@using games_r_us_source.Data;
@using games_r_us_source.Components.Helpers;
@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext dbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@rendermode InteractiveServer

<AuthorizeView Context="authorizeViewContext">
    <Authorized>
        <p class="font-bold text-red-600">@ErrorMessage</p>
        <p class="font-bold text-green-600">@SuccessMessage</p>
        <EditForm class="m-auto max-w-full" Model="@bid" OnValidSubmit="HandleSubmit" FormName="placeBidForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="amount" class="block text-center">
                New bid
            </label>
            <div class="border-2 flex flex-col border-black md:flex-row">
                <InputNumber id="amount" class="w-full flex-grow" @bind-Value="@bid.Amount" />
                <button class="bg-green-500" type="submit">Place bid</button>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p class="font-bold">You need to be logged in to place a bid.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int ListingID { get; set; }

    private string UserName { get; set; }
    private string ErrorMessage { get; set; }
    private string SuccessMessage { get; set; }

    Bid bid = new Bid { Time = DateTime.Now };

    private void HandleSubmit()
    {
        Listing listing = ListingHelper.GetListingFromListingID(ListingID, dbContext);
        ApplicationUser user = AccountHelper.GetAccountFromUserName(UserName, dbContext);
        Bid? highestBid = BidHelper.GetHighestBidFromListingID(ListingID, dbContext);

        // If logged in user authored the listing in question
        if (listing.ApplicationUser.Id == user.Id)
        {
            ErrorMessage = "You cannot make a bid on a listing that you authored.";
            return;
        }

        // If logged in user already holds the highest bid
        if (highestBid.ApplicationUserID == user.Id)
        {
            ErrorMessage = "You already hold the highest bid.";
            return;
        }

        if (this.bid.Amount == 0)
        {
            ErrorMessage = "Amount is required.";
            return;
        }

        // If bid is lower than the current highest bid, or lower than the starting price
        if (highestBid.Amount >= this.bid.Amount || (highestBid == null && this.bid.Amount <= listing.StartingPrice))
        {
            ErrorMessage = "Bid amount is too low.";
            return;
        }

        bid.ListingID = ListingID;
        bid.Listing = ListingHelper.GetListingFromListingID(ListingID, dbContext);

        bid.ApplicationUserID = user.Id;
        bid.ApplicationUser = user;
        dbContext.Bids.Add(bid);
        dbContext.SaveChanges();

        ErrorMessage = "";
        SuccessMessage = $"Success! New bid at {bid.Amount} placed.";
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the logged in user
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Get the user's email if they are authenticated
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
        }
    }
}