@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

<PageTitle>Profile</PageTitle>

<StatusMessage />

<div class="flex flex-col">
	<p class="mb-3 mt-3">
		Email: <span class="bg-gray-200 pl-1 pr-1">@email</span>
	</p>
	<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
		<DataAnnotationsValidator />
		<ValidationSummary class="text-danger" role="alert" />
		<div class="mb-3">
			<label for="phone-number" class="">Phone number: </label>
			<InputText @bind-Value="Input.PhoneNumber" class="border border-black" placeholder="Enter phone number..." />
			<ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
		</div>
		<div class="mb-3">
			<label for="full-name" class="">Full name: </label>
			<InputText @bind-Value="Input.FullName" class="border border-black" placeholder="Enter full name..." />
		</div>
		<div>
			<label for="address" class="">Address: </label>
			<InputTextArea @bind-Value="Input.Address" class="border border-black" placeholder="Enter address..." />
		</div>
		<button type="submit" class="mt-3 rounded-xl bg-green-500 px-3 py-2 hover:bg-green-300">Save</button>
	</EditForm>
</div>

@code {
	private ApplicationUser user = default!;
	private string? email;
	private string? phoneNumber;
	private string? fullName;
	private string? address;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		user = await UserAccessor.GetRequiredUserAsync(HttpContext);
		phoneNumber = await UserManager.GetPhoneNumberAsync(user);
		email = await UserManager.GetEmailAsync(user);
		//username = await UserManager.GetUserNameAsync(user);
		// i wanted to create a method like this ^ to handle getting the users fullname
		// but creating an extension for UserManager was a little tricky (future improvement?)
		// - simon-s-99

		using (var dbContext = dbContextFactory.CreateDbContext())
		{
			fullName = dbContext.ApplicationUsers.Find(user.Id).FullName;
			Input.FullName ??= fullName; // set Input.FullName to fullName if it is not null

			address = dbContext.ApplicationUsers.Find(user.Id).Address;
			Input.Address ??= address; // set Input.Address to address if it is not null
		}

		Input.PhoneNumber ??= phoneNumber;
	}

	private async Task OnValidSubmitAsync()
	{
		if (Input.PhoneNumber != phoneNumber)
		{
			var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
			if (!setPhoneResult.Succeeded)
			{
				RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
			}
		}

		// only update post in database if name has actually been changed
		if (Input.FullName != fullName)
		{
			using (var dbContext = dbContextFactory.CreateDbContext())
			{
				var userEntity = dbContext.ApplicationUsers.Find(user.Id);
				userEntity.FullName = Input.FullName;
				dbContext.SaveChangesAsync();
			}
		}

		// only update post in database if address has actually been changed
		if (Input.Address != address)
		{
			using (var dbContext = dbContextFactory.CreateDbContext())
			{
				var userEntity = dbContext.ApplicationUsers.Find(user.Id);
				userEntity.Address = Input.Address;
				dbContext.SaveChangesAsync();
			}
		}

		await SignInManager.RefreshSignInAsync(user);
		RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
	}

	private sealed class InputModel
	{
		[Phone]
		[Display(Name = "Phone number")]
		public string? PhoneNumber { get; set; }

		public string? FullName { get; set; }
		public string? Address { get; set; }
	}
}
