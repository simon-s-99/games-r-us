@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            @* <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div> *@
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FullName" class="form-control" placeholder="Please enter you full name." />
                @* <input type="text" bind-Value="@fullName" class="form-control" placeholder="Please enter you full name." /> *@
                <label for="fullName" class="form-label">Full name</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    //private string? username;
    private string? fullName;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        //username = await UserManager.GetUserNameAsync(user);
        // i wanted to create a method like this ^ to handle getting the users fullname
        // but creating an extension for UserManager was a little tricky (future improvement?)
        // - simon-s-99

        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            fullName = dbContext.ApplicationUsers.Find(user.Id).FullName;
            Input.FullName ??= fullName; // set queriedFullName to inputFullName if it is not null
        }

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        // only update post in database if name has actually been changed
        if (Input.FullName != fullName)
        {
            using (var dbContext = dbContextFactory.CreateDbContext())
            {
                var userEntity = dbContext.ApplicationUsers.Find(user.Id);
                userEntity.FullName = Input.FullName;
                dbContext.SaveChangesAsync();
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        public string? FullName { get; set; } // needed for comparison purposes 
    }
}
