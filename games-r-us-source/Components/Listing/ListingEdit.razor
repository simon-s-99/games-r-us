@* Enables onclick functions *@
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using games_r_us_source.Components
@using games_r_us_source.Components.Helpers
@using games_r_us_source.Data
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@* Used to redirect user to home page *@
@inject NavigationManager NavigationManager

@* Used in LoadFiles *@
@inject IWebHostEnvironment Environment

@page "/listing/edit"


@* Button to show the modal when editing a listing *@
<button @onclick="() => ShowModal()" class="bg-gray-300 px-4 py-2 text-black rounded-xl font-bold hover:bg-gray-400 h-20 w-20">Edit</button>


@if (IsVisible)
{
    @* if the user presses outside of the "ShowModal" it triggers "ShowConfirmCancel" *@
    <div @onclick="ShowConfirmCancel" class="inset-0 bg-gray-800 fixed z-10 flex items-center justify-center bg-opacity-75">
        <div class="bg-white p-6 w-full max-w-md rounded-lg shadow-lg" @onclick:stopPropagation>

            @* If the user has an image uploaded we show the "delete image" button *@
            @if (base64Image != null || Listing.ImagePath != null)
            {
                <button @onclick="RemoveImage"
                        class="bg-red-500 px-2 py-1 text-white mb-4 rounded-lg font-bold shadow transition duration-150 ease-in-out hover:bg-red-700">
                    Remove Image
                </button>
            }

            @* Editform used in blazor for editing a listing  *@
            <EditForm Model="@Listing" OnValidSubmit="HandleValidSubmit">

                @* Here the user uploads their image *@
                <div class="relative text-center">
                    @if (base64Image != null)
                    {
                        <img src="@base64Image" alt="New Listing Image" class="relative-fit w-48 h-48 mb-4 mx-auto overflow-hidden rounded-md">
                        <label for="image" class="bg-white text-gray-500 m-auto block w-full cursor-pointer rounded-l border-2 bg-clip-border transition hover:bg-gray-400">

                            Change Image
                            <InputFile id="image" class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }
                    else if (Listing.ImagePath != null)
                    {
                        <img src="@($"/images/{Listing.ImagePath}")" alt="Existing Listing Image" class="relative-fit w-48 h-48 mb-4 mx-auto overflow-hidden rounded-md">
                        <label for="image" class="bg-white text-gray-500 m-auto block w-full cursor-pointer rounded-l border-2 bg-clip-border transition hover:bg-gray-400">

                            Change Image
                            <InputFile id="image" class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }
                    else
                    {
                        <label for="image" class="mt-4 border-gray-300 bg-white bg-gray-300 p-2 px-3 py-1.5 text-gray-700 text-black m-auto block inline-block w-full cursor-pointer rounded rounded-full border text-base text-sm leading-6 transition-colors duration-150 ease-in-out hover:bg-gray-400">
                            Add Image
                            <InputFile id="image" class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                        </label>
                    }

                </div>

                @* Rest of the input fields *@
                <div class="mt-4 text-center">
                    <h3 class="text-gray-900 text-lg font-medium leading-6">Edit listing</h3>

                    <DataAnnotationsValidator />
                    <ul class="mt-3 space-y-4">
                        <li>
                            @* Input for name *@
                            <label for="name" class="text-gray-700 block text-sm font-medium">Name:</label>
                            <InputText id="name" @bind-Value="Listing.Name" class="input-field mt-1 block w-full"
                                       placeholder="@Listing.Name" min="1" />
                            <ValidationMessage For="@(() => Listing.Name)" class="text-red-500 text-xs mt-1" />
                        </li>
                        <li>
                            <label for="startingPrice" class="text-gray-700 block text-sm font-medium">Starting price:</label>
                            @if (!DisablePrice)
                            {
                                <InputNumber id="startingPrice" @bind-Value="Listing.StartingPrice" class="input-field mt-1 block w-full"
                                             placeholder="@Listing.StartingPrice" min="1" />
                                <ValidationMessage For="@(() => Listing.StartingPrice)" class="text-red-500 text-xs mt-1" />
                            }
                            else  // If there has been a bid made, the user cannot edit the starting price
                            {
                                <InputNumber id="startingPrice" @bind-Value="Listing.StartingPrice" class="input-field mt-1 block w-full"
                                             disabled />
                                <p class="mt-1 text-red-500 text-xs">Cannot change starting price after a bid has been made.</p>
                            }
                        </li>

                        <li>
                            @* Input for description *@
                            <label for="description" class="text-gray-700 block text-sm font-medium">Description:</label>
                            <InputTextArea id="description" @bind-Value="Listing.Description" class="input-field mt-1 block w-full"
                                           placeholder="@Listing.Description" maxlength="100" />
                        </li>
                        <li>
                            @* Uneditable end date *@
                            <label for="auctionEnd" class="text-gray-700 block text-sm font-medium">End date for Auction:</label>
                            <input type="datetime-local" id="auctionEnd" @bind="Listing.AuctionEnd" class="input-field mt-1 block w-full"
                                   min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" disabled />
                        </li>

                        <li>
                            @* Platform input (xbox, gamecube, etc.) *@
                            <label for="platform" class="text-gray-700 block text-sm font-medium">Platform:</label>
                            <InputSelect id="platform" @bind-Value="Listing.Platform" class="input-field mt-1 block w-full">
                                @* generate options for platforms *@
                                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                                {
                                    <option value="@platform">@platform</option>
                                }
                            </InputSelect>
                        </li>
                        <li>
                            @* Game category (fps, indie, etc.) *@
                            <label for="gameCategory" class="text-gray-700 block text-sm font-medium">Game Category:</label>
                            <InputSelect id="gameCategory" @bind-Value="Listing.GameCategory" class="input-field mt-1 block w-full">

                                <option value="null">None</option> @* None as an option in case the listing is a console *@

                                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </li>
                    </ul> @* Submit and cancel buttons *@
                    <button type="submit" @onclick="HandleValidSubmit" class="mt-4 bg-blue-500 px-4 py-2 text-white rounded font-bold hover:bg-blue-700">Save changes</button>
                    <button type="button" @onclick="ShowConfirmCancel" class="ml-2 mt-4 bg-red-500 px-4 py-2 text-white rounded font-bold hover:bg-red-700">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>

    @if (showConfirmation) @* If the user presses "cancel" we show this confirmation modal *@
    {
        <div class="inset-0 bg-black fixed z-30 flex items-center justify-center bg-opacity-50">
            <div class="bg-white p-4 flex flex-col items-center rounded">
                <h2 class="mb-4 text-lg">Are you sure you want to cancel?</h2>
                <div class="space-x-4 flex justify-center">
                    <button class="bg-green-500 px-4 py-2 text-white rounded" @onclick="ConfirmCancel">Yes</button>
                    <button class="bg-red-500 px-4 py-2 text-white rounded" @onclick="HideConfirmCancel">No</button>
                </div>
            </div>
        </div>
    }

    @if (isSuccessful)
    {
        <div class="inset-0 bg-black fixed z-30 flex items-center justify-center bg-opacity-50">
            <div class="bg-white p-4 flex flex-col items-center rounded">
                <h3 class="mb-4 text-lg">Changes saved successfully</h3>
            </div>
        </div>
    }
}


@code {
    [Parameter]
    public Listing Listing { get; set; } // Get Listing from "ListingDetails"

    [Parameter]
    public Bid? HighestBid { get; set; }

    private long maxFileSize = 1024 * 1024 * 3; // file size set to 3MB
    private int maxAllowedFiles = 1; // In case we ever want to allow more than one image in the future

    private IBrowserFile? file; // Holds a reference to the uploaded file

    private string base64Image; // For immediate display in our ui
    private string serverImagePath; // Path where the image is stored
    private string currentImagePath;
    private DateTime lastSubmissionTime = DateTime.MinValue;
    private bool DisablePrice = false; // if true the user can edit the starting price (if no bids were made)

    private bool IsVisible;
    private bool showConfirmation;
    private bool isSuccessful;

    private async Task HandleValidSubmit()
    {
        var currentTime = DateTime.Now;

        // Check to prevent rapid successive submissions
        if ((currentTime - lastSubmissionTime).TotalSeconds < 3)
        {
            return;
        }

        using var dbContext = dbContextFactory.CreateDbContext();

        // Attach the updated Listing to the context and mark it as modified
        dbContext.Entry(Listing).State = EntityState.Modified;

        // Update listing details from the edit form
        // Directly using Listing object assuming it's the same object updated by data-binding in the form
        if (!string.IsNullOrEmpty(currentImagePath))
        {
            string permanentFolderPath = Path.Combine("C:\\Temp");
            string tempImagePath = Path.Combine("C:\\Temp", "temp_images", currentImagePath);
            string permanentImagePath = Path.Combine(permanentFolderPath, currentImagePath);

            if (File.Exists(tempImagePath))
            {
                Directory.CreateDirectory(permanentFolderPath); // Ensure the permanent directory exists
                File.Move(tempImagePath, permanentImagePath); // Move the image from temp to perm
                Listing.ImagePath = currentImagePath; // Update the database image path
            }
            else
            {
                return;
            }
        }

        // Attempt to save changes to the database
        try
        {
            dbContext.Update(Listing);
            await dbContext.SaveChangesAsync();
            isSuccessful = true;
            StateHasChanged();

            await Task.Delay(2000); // Display the success message for 2 seconds before redirect

            isSuccessful = false;
            NavigationManager.NavigateTo("/", forceLoad: true);
            lastSubmissionTime = currentTime;
        }
        catch (DbUpdateException ex)
        {
            Console.WriteLine($"Database update failed: {ex.Message}");
            isSuccessful = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
            isSuccessful = false;
            StateHasChanged();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var result = await ListingHelper.LoadFilesAsync(e, currentImagePath, maxFileSize);

        base64Image = result.base64Image;
        currentImagePath = result.currentImagePath;

        StateHasChanged();
    }

    public void ShowModal()
    {
        DisablePrice = HighestBid != null && HighestBid.Amount > Listing.StartingPrice;
        IsVisible = true;
    }

    private void RemoveImage()
    {
        base64Image = null;

        // If there's a current image path in temporary storage, delete it
        if (!string.IsNullOrEmpty(currentImagePath))
        {
            string tempFolderPath = Path.Combine("C:\\Temp", "temp_images");
            string fullPath = Path.Combine(tempFolderPath, currentImagePath);
            if (File.Exists(fullPath))
            {
                File.Delete(fullPath);  // Delete the image file
            }
            currentImagePath = null;
        }

        Listing.ImagePath = null;
        StateHasChanged();
    }

    private void ShowConfirmCancel() => showConfirmation = true;

    private void HideConfirmCancel()
    {
        showConfirmation = false;
    }

    private void ConfirmCancel()
    {
        showConfirmation = false;
        IsVisible = false;
    }

    public void CloseModal()
    {
        isSuccessful = false;
        base64Image = null;
        serverImagePath = null;
        IsVisible = false;
    }

}
