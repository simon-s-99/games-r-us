@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Data
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@* Display the listings here *@
@if (listings.Any())
{
    <div class="mt-4 px-4">
        <h2 class="text-gray-800 text-lg font-semibold">Listings:</h2>
        <div class="gap-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            @foreach (var listing in listings)
            {
                <div class="bg-white p-4 overflow-hidden rounded-lg shadow-lg">
                    <img class="h-64 w-full object-cover" src="@($"/images/{listing.ImagePath}")" alt="Image of listing">
                    <div class="p-4">
                        <h3 class="text-md text-gray-900 font-semibold">@listing.Name</h3>
                        <!-- height and overflow handling for the description -->
                        <p class="text-gray-500 h-20 overflow-hidden overflow-ellipsis">@listing.Description</p>
                    </div>
                    <div class="border-gray-200 bg-gray-100 px-4 pb-4 pt-3 border-t">
                        <div class="text-gray-600 text-xs font-bold uppercase tracking-wide">Price</div>
                        <div class="text-gray-900 text-lg">$@listingPrices[listing.ID]</div>
                        <div class="text-gray-600 text-xs font-bold uppercase tracking-wide">Time Remaining</div>
                        <div class="text-gray-900 text-lg">@GetTimeDifference(listing.AuctionEnd)</div>
                    </div>
                </div>
            }
        </div>

    </div>
}
else
{
    <p class="font-semibold italic">No listings found.</p>
}

@code {
    // [PAGINATION COMMENT (issue #8 on github)] 
    // this will need to be restricted later to only get a certain amount of
    // listings from the database, implement when doing pagination
    [Parameter]
    public List<Listing> listings { get; set; }

    // display the price associated with each listing.The dictionary allows us to directly access the price using the listing ID
    private Dictionary<int, decimal> listingPrices = new Dictionary<int, decimal>(); 

    [Parameter]
    public Bid? HighestBid { get; set; }

    public bool ShowBidAsPrice = false;

    // Lifecycle method for blazor that is called after this component
    // is initialized but before being rendered
    protected override async Task OnInitializedAsync()
    {
        using (ApplicationDbContext dbContext = dbContextFactory.CreateDbContext())
        {
            await LoadListingsAndPrices();
        }
    }
    // Communication with other components (search)
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async Task<decimal> GetCurrentBid(int listingID)
    {
        using var dbContext = dbContextFactory.CreateDbContext();

        // Fetch highest bid for the listing
        var highestBid = await dbContext.Bids
            .Where(b => b.ListingID == listingID)
            .MaxAsync(b => (decimal?)b.Amount);

            //Return highestbid or StartingPrice if bid == null
        return highestBid ?? (await dbContext.Listings
            .Where(l => l.ID == listingID)
            .Select(l => l.StartingPrice)
            .FirstOrDefaultAsync());
    }

    //fetch listings and their respecrtive prices
    private async Task LoadListingsAndPrices()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var currentDate = DateTime.Now;
            listings = await dbContext.Listings
                .Where(l => l.AuctionEnd > currentDate)
                .ToListAsync();

            foreach (var listing in listings)
            {
                decimal price = await GetCurrentBid(listing.ID);
                listingPrices[listing.ID] = price;
            }
        }

        StateHasChanged();
    }


    private string GetTimeDifference(DateTime endDate)
    {
        TimeSpan timeDifference = endDate - DateTime.Now;

        if (timeDifference.TotalDays >= 7)
        {
            int weeks = (int)(timeDifference.TotalDays / 7);
            int days = (int)(timeDifference.TotalDays % 7); // Get remaining days after full weeks
            if (days > 0)
                return $"{weeks} weeks and {days} days";
            else
                return $"{weeks} weeks";
        }
        else if (timeDifference.TotalDays >= 1)
        {
            int days = (int)timeDifference.TotalDays;
            int hours = timeDifference.Hours;
            if (hours > 0)
                return $"{days} days and {hours} hours";
            else
                return $"{days} days";
        }
        else if (timeDifference.TotalHours >= 1)
        {
            int hours = (int)timeDifference.TotalHours;
            int minutes = timeDifference.Minutes;
            if (minutes > 0)
                return $"{hours} hours and {minutes} minutes";
            else
                return $"{hours} hours";
        }
        else if (timeDifference.TotalMinutes >= 1)
        {
            int minutes = (int)timeDifference.TotalMinutes;
            int seconds = timeDifference.Seconds;
            if (seconds > 0)
                return $"{minutes} minutes and {seconds} seconds";
            else
                return $"{minutes} minutes";
        }
        else if (timeDifference.TotalSeconds >= 1)
        {
            return $"{(int)Math.Floor(timeDifference.TotalSeconds)} seconds";
        }
        else
        {
            return "Auction has ended";
        }
    }
}
