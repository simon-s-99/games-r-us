@page "/search"
@using Microsoft.AspNetCore.WebUtilities
@using games_r_us_source.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using games_r_us_source.Components.Pages

@using Dapper;
@using System.Data.SqlClient;
@using System.Threading; @* StateHasChanged *@
@using System.Threading.Tasks;
@* @using Blazored.Typeahead *@


@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@*Used for live search updates*@
@using System.Timers


@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory

@rendermode InteractiveServer


@* <div class="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">
    <div class="flex gap-4">
        <div class="flex-1">
            <BlazoredTypeahead SearchMethod="SearchListings"
                               @bind-Value="selectedListing"
                               Placeholder="Search listings..."
                               Debounce="300">
                <SelectedTemplate>
                    @context.Name
                </SelectedTemplate>
                <ResultTemplate>
                    @context.Name
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="w-48">
            <select @bind="selectedPlatform" class="form-select w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Platforms</option>
                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                {
                    <option value="@platform">@platform.ToString()</option>
                }
            </select>
        </div>
        <div class="w-48">
            <select @bind="selectedCategory" class="form-select w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Categories</option>
                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                {
                    <option value="@category">@category.ToString()</option>
                }
            </select>
        </div>
        <button @onclick="SubmitSearch" class="rounded-lg bg-gray-500 px-4 py-2 font-bold text-white hover:bg-gray-700">
            Search
        </button>
    </div>
</div> *@


<div class="mx-auto max-w-4xl px-4 py-6 sm:px-6 lg:px-8">
    <div class="flex gap-4">
        <div class="flex-1">
            <InputText class="form-input w-full rounded-lg border-gray-300 shadow-sm"
                       @bind-Value="searchText"
                       @oninput="OnInputChanged" placeholder="Search..." maxlength="50" />
        </div>
        <div class="w-48">
            <select @bind="selectedPlatform" class="form-select w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Platforms</option>
                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                {
                    <option value="@platform">@platform.ToString()</option>
                }
            </select>
        </div>
        <div class="w-48">
            <select @bind="selectedCategory" class="form-select w-full rounded-lg border-gray-300 shadow-sm">
                <option value="">All Categories</option>
                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                {
                    <option value="@category">@category.ToString()</option>
                }
            </select>
        </div>  @*Search with the selected search terms*@
        <button @onclick="SubmitSearch" class="rounded-lg bg-gray-500 px-4 py-2 font-bold text-white hover:bg-gray-700">
            Search
        </button>
    </div>
</div>



@code {
    private string searchText;
    private Platform? selectedPlatform;
    private GameCategory? selectedCategory = null;

    [Parameter]
    public EventCallback<string> OnSearchTextChanged { get; set; }
    [Parameter]
    public EventCallback<Platform?> OnPlatformChanged { get; set; }
    [Parameter]
    public EventCallback<GameCategory?> OnCategoryChanged { get; set; }


    [Parameter]
    public string SearchText { get; set; }

    [Parameter]
    public Platform? SelectedPlatform { get; set; }

    [Parameter]
    public GameCategory? SelectedCategory { get; set; }

    [Parameter]
    public EventCallback<string> OnSearchChanged { get; set; }
    [Parameter]
    public EventCallback<List<Listing>> OnListingsFiltered { get; set; }



    private Listing selectedListing;

    [Parameter]
    public EventCallback<List<Listing>> OnListingsUpdated { get; set; }

    private List<Listing> listings = new List<Listing>();
    // private Timer debounceTimer;
    private int updateCounter = 0;

    private int Count { get; set; } = 5;
    List<string> EventType = new List<string>();


    private async Task<IEnumerable<Listing>> SearchListings(string searchText)
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            return await dbContext.Listings
                                  .Where(l => EF.Functions.Like(l.Name, $"%{searchText}%"))
                                  .ToListAsync();
        }
    }

    public static class JSInteropMethods
    {
        [JSInvokable]
        public static Task RefreshUI()
        {
            // This should be a reference to your component or a method that can trigger UI updates
            // Example: MyComponent.Instance.StateHasChanged();
            return Task.CompletedTask;
        }
    }



    void StartCountdown()
    {
        var timer = new System.Threading.Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }


    protected override async Task OnInitializedAsync()
    {

        var connectionString = Configuration.GetConnectionString("DefaultConnection");
        using (var connection = new Microsoft.Data.SqlClient.SqlConnection(connectionString))
        {
            await connection.OpenAsync();
            listings = (await connection.QueryAsync<Listing>("SELECT * FROM Listings")).ToList();
        }
        // debounceTimer = new Timer(200); // Debounce interval set to 200ms
        // debounceTimer.AutoReset = false; // Ensures that the timer only runs once after the interval
        // debounceTimer.Elapsed += HandleDebounceElapsed;
        StateHasChanged();

    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString() ?? string.Empty;
        Console.WriteLine($"Search Text: {searchText}"); // Debugging output

        // debounceTimer.Stop();
        // debounceTimer.Start();
        await SubmitSearch();
        StateHasChanged();
    }

    private async void HandleDebounceElapsed(object sender, ElapsedEventArgs e)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                await ApplyFilters(searchText, selectedPlatform, selectedCategory);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during HandleDebounceElapsed: {ex.Message}");
        }
    }


    public void Dispose()
    {
        // debounceTimer?.Stop();
        // debounceTimer?.Dispose();
        StateHasChanged();
    }




    private async Task ApplyFilters(string searchText, Platform? platform, GameCategory? category)
    {
        Console.WriteLine($"Applying filters: Text={searchText}, Platform={platform}, Category={category}"); // More Debugging output

        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var query = dbContext.Listings.AsQueryable();

            if (!string.IsNullOrEmpty(searchText))
            {
                // var nameParam = $"%{searchText}%";
                // var descriptionParam = $"%{searchText}%";

                query = query.Where(l => EF.Functions
                .Like(l.Name, $"%{searchText}%") ||
                EF.Functions.Like(l.Description, $"%{searchText}%"));

                // query = query.Where(l => EF.Functions.Like(l.Name, "%play%") || EF.Functions.Like(l.Description, "%play%"));



                Console.WriteLine($"Querying with searchText: %{searchText}%"); // For debugging

                listings = await query.ToListAsync();
                InvokeAsync(StateHasChanged);

            }

            if (platform.HasValue) // HasValue since we're working with enums
            {
                query = query.Where(l => l.Platform == platform.Value);
            }

            if (category.HasValue)
            {
                query = query.Where(l => l.GameCategory == category.Value);
            }

            listings = await query.ToListAsync();
            ForceRender();

            StateHasChanged();
        }
    }

    private void ForceRender()
    {
        updateCounter++; // Modify state to ensure component updates
        StateHasChanged();
    }

    private async Task UpdateListings(List<Listing> newListing)
    {
        await OnListingsUpdated.InvokeAsync(newListing);
    }

    private async Task SubmitSearch()
    {
        try
        {
            await ApplyFilters(searchText, selectedPlatform, selectedCategory);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Following error occured: {ex.Message}");
        }

        StateHasChanged();
    }
}

