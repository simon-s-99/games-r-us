@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Components.Notifications
@using games_r_us_source.Data;
@using games_r_us_source.Components.Helpers;
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> dbContextFactory;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NotificationState NotificationState

<AuthorizeView Context="authorizeViewContext">
    <Authorized>
        <p class="font-bold text-red-600">@ErrorMessage</p>
        <p class="font-bold text-green-600">@SuccessMessage</p>
        <EditForm class="m-auto max-w-full" Model="@bid" OnValidSubmit="HandleValidSubmit" FormName="bidPlaceForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="amount" class="block text-center">
                New bid
            </label>
            <div class="border-2 flex flex-col border-black md:flex-row">
                <InputNumber id="amount" class="w-full flex-grow" @bind-Value="@bid.Amount" />
                <button class="bg-green-500" type="submit">Place bid</button>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p class="font-bold">You need to be logged in to place a bid.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public Listing CurrentListing { get; set; }

    [Parameter]
    public Bid? HighestBid { get; set; }

    private string UserName { get; set; }
    private string ErrorMessage { get; set; }
    private string SuccessMessage { get; set; }

    // Create new bid object, linked to the form
    Bid bid = new Bid { Time = DateTime.Now };

    // Only runs if form contains expected data types
    private async Task HandleValidSubmit(EditContext editContext)
    {
        // Automatically disposes the context after use
        using var dbContext = dbContextFactory.CreateDbContext();

        // The if statements below require first querying the database
        ApplicationUser user = ApplicationUserHelper.GetAccountFromUserName(UserName, dbContext);

        // If logged in user authored the listing in question
        if (CurrentListing.ApplicationUser.Id == user.Id)
        {
            ErrorMessage = "You cannot make a bid on a listing that you authored.";
            return;
        }

        if (this.bid.Amount <= 0)
        {
            ErrorMessage = "Amount cannot be less than or equal to zero.";
            return;
        }

        // Get highest bid again to make sure it wasn't trumped after first getting the highest bid
        HighestBid = BidHelper.GetHighestBidFromListingID(CurrentListing.ID, dbContext);

        // If bid has no highest bid: check if bid is lower than starting price
        if (HighestBid is null) // Avoids an exception
        {
            if (this.bid.Amount <= CurrentListing.StartingPrice)
            {
                ErrorMessage = "Bid amount has to be greater than the starting price.";
                return;
            }
        }

        // If a highest bid exists, if the current bid is lower than the highest bid
        if (HighestBid is not null) // Avoids an exception
        {
            if (HighestBid.Amount >= this.bid.Amount)
            {
                ErrorMessage = "Bid amount has to trump the highest bid.";
                return;
            }
        }

        bid.ListingID = CurrentListing.ID;
        bid.Listing = CurrentListing;

        bid.ApplicationUserID = user.Id;
        bid.ApplicationUser = user;

        try
        {
            dbContext.Bids.Add(bid); // Adds the new listing to the database
            await dbContext.SaveChangesAsync();

            // Notifies user of trumped bid that they have been outbid
            // (currently only works if user is online)
            string? oldBidUserName = ApplicationUserHelper
                .GetAccountFromUserID(HighestBid.ApplicationUserID, dbContext).UserName;
            NotificationState.SetNotificationDTO(new NotificationDTO(oldBidUserName,
                $"Your bid on {CurrentListing.Name} has been trumped with a bid of ${bid.Amount}."));
        }
        catch (DbUpdateException ex)
        {
            Console.WriteLine($"Database update failed: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
        ErrorMessage = "";
        SuccessMessage = $"Success! New bid at ${bid.Amount} placed.";
    }


    protected override async Task OnInitializedAsync()
    {
        // Get the logged in user
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // Get the user's email if they are authenticated
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
        }
    }

}