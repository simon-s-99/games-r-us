@page "/createListing"
@using Microsoft.AspNetCore.Components.Forms
@using games_r_us_source.Models
@using games_r_us_source.Data
@using System.Net.Http
@inject IConfiguration config
@rendermode InteractiveServer
@inject AppDbContext dbContext


<button @onclick="ShowModal" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">Create a listing</button>

@if (IsVisible)
{
    <div class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <EditForm Model="newListingImage" OnValidSubmit="SubmitForm">
                <div class="relative">
                    @if (imagePath != null)
                    {
                        <img src="@imagePath" alt="Listing Image" class="mx-auto w-48 h-48 object-cover rounded-md">
                    }
                    <label class="absolute right-2 top-2 cursor-pointer text-sm bg-gray-300 hover:bg-gray-400 text-black rounded-full p-2">
                        Add Image
                        <InputFile class="hidden" OnChange="@LoadFiles" accept=".png, .jpg, .jpeg, .img" />
                    </label>
                    <ul class="error-messages p-2">
                        @foreach (var error in errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            </EditForm>

            <div class="text-center mt-4">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Create a Listing</h3>
                <EditForm Model="@listing" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <ul class="space-y-4 mt-3">
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Name:</label>
                            <InputText id="name" @bind-Value="listing.Name" class="input-field mt-1 block w-full" placeholder="Name of your listing" />
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Starting price:</label>
                            <InputNumber id="startingPrice" @bind-Value="listing.StartingPrice" class="input-field mt-1 block w-full" placeholder="Starting Price" />
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Description:</label>
                            <InputTextArea id="description" @bind-Value="listing.Description" class="input-field mt-1 block w-full" placeholder="Description" />
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">End date for Auction:</label>
                            <input type="datetime-local" id="auctionEnd" @bind="listing.AuctionEnd" class="input-field mt-1 block w-full" />
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Platform:</label>
                            <InputSelect id="platform" @bind-Value="listing.Platform" class="input-field mt-1 block w-full">
                                @foreach (var platform in Enum.GetValues(typeof(Platform)))
                                {
                                    <option value="@platform">@platform</option>
                                }
                            </InputSelect>
                        </li>
                        <li>
                            <label class="block text-sm font-medium text-gray-700">Game Category:</label>
                            <InputSelect id="gameCategory" @bind-Value="listing.GameCategory" class="input-field mt-1 block w-full">
                                @foreach (var category in Enum.GetValues(typeof(GameCategory)))
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </li>
                    </ul>
                    <button type="submit" class="mt-4 px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded">Submit</button>
                    <button type="button" @onclick="CloseModal" class="mt-4 ml-2 px-4 py-2 bg-red-500 hover:bg-red-700 text-white font-bold rounded">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
}




@code {
    //Listing listing = new Listing();
    Listing listing = new Listing { AuctionEnd = DateTime.Now.AddDays(7) };
    private string imagePath;
    private bool isImageUploaded = false;


    private string auctionEnd
    {
        get => listing.AuctionEnd.ToString("yyyy-MM-ddTHH:mm");
        set
        {
            if (DateTime.TryParse(value, out var newDate))
            {
                listing.AuctionEnd = newDate;
            }
        }
    }

    // file size set to 3MB
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 1;
    private List<string> errors = new();
    private Listing newListingImage = new();
    private IBrowserFile? file;

    private async Task SubmitForm()
    {
        try
        {
            string relativePath = await CaptureFile();
            newListingImage.ImagePath = relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //file = e.File;
        var imageFile = e.File;
        if (imageFile != null)
        {
            // Convert the image to a base64 string to display in an <img> tag
            var format = "image/png"; 
            using (var ms = new MemoryStream())
            {
                await imageFile.OpenReadStream(maxFileSize).CopyToAsync(ms);
                var buffer = ms.ToArray();
                imagePath = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
                isImageUploaded = true;
            }
        }

    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }
        try
        {
            // Gets the extension of the file name the user passes in
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("FileStorage")!,
                "Listings",
                newFileName);

            string relativePath = Path.Combine("Listings", newFileName);

            Directory.CreateDirectory(Path.Combine(
                config.GetValue<string>("FileStorage")!,
            "Listings"));

            // using closes by itself when reaching the end of the method
            await using FileStream fs = new(path, FileMode.Create);
            // copy the file to the currently open filestream
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!isImageUploaded)
        {
            Console.WriteLine("Please upload an image");
            return;
        }

        dbContext.Listings.Add(listing);
        await dbContext.SaveChangesAsync();
        CloseModal();
    }


    bool IsVisible;
    bool showConfirmation;

    public void ShowModal()
    {
        IsVisible = true;
        //StateHasChanged();
    }

    public void CloseModal()
    {
        IsVisible = false;
        //StateHasChanged();
    }

    public async Task ConfirmCancel()
    {
        showConfirmation = false;
        //StateHasChanged();
    }

}

