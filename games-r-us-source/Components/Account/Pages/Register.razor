@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using games_r_us_source.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="border-2 font-[Kadwa] m-auto mt-6 w-2/5 rounded border-black text-center">

    <h1 class="mb-4 text-2xl font-bold">Register</h1>

    <StatusMessage Message="@Message" />
    <EditForm class="m-2 flex flex-col justify-center" Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <label for="email" class="left-[9999px] absolute">Email</label> @* For accessibility purposes *@
        <InputText @bind-Value="Input.Email" id="email" class="border-[1px] peer mt-8 rounded border-black py-2" autocomplete="username" aria-required="true" placeholder="Email" />
        <ValidationMessage For="() => Input.Email" class="text-red-500" />
        <label for="password" class="left-[9999px] absolute">Password</label>
        <InputText type="password" id="password" @bind-Value="Input.Password" class="border-[1px] mt-4 rounded border-black py-2" autocomplete="current-password" aria-required="true" placeholder="Password" />
        <ValidationMessage For="() => Input.Password" class="text-red-500" />
        <label for="confirm-password" class="left-[9999px] absolute">Confirm Password</label>
        <InputText type="password" id="confirm-password" @bind-Value="Input.ConfirmPassword" class="border-[1px] mt-4 rounded border-black py-2" autocomplete="new-password" aria-required="true" placeholder="Confirm password" />
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500" />
        <button type="submit" class="border-[1px] m-auto mt-4 block rounded-xl border-black bg-green-300 p-2">Register</button>
    </EditForm>
    <div class="border-b-2 m-auto my-8 h-1 w-3/4 border-dashed border-black"></div> @* Vertical divider *@
    <p class="mb-3">Or register using</p>
    <ExternalLoginPicker />
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
