@using Microsoft.EntityFrameworkCore
@using games_r_us_source.Components.Listing
@using games_r_us_source.Components.Account
@using games_r_us_source.Components.Account.CustomComponents
@using games_r_us_source.Data
@using games_r_us_source.Components.Helpers

@rendermode InteractiveServer

@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<LoginLogoutButton />

<ProfileButton />

<ListingCreate />

<ListingSearch OnSearchResultsUpdated="HandleSearchResults" />

<ListingSort OnSortResultsUpdated="HandleSorting" />

<!-- Only here as a template for how to show content if
    user is logged  in or not.
-->
<AuthorizeView>
    <Authorized>
        @* Display this content here if user is logged in *@
        @* content accesses the AuthenticationState of the logged in user *@
        @context.User.Identity.Name
    </Authorized>
    <NotAuthorized>
        @* Display this content here if user is not logged in *@
    </NotAuthorized>
</AuthorizeView>

<ListingDisplayAll listings="@displayListings" />

<ListingsForUser />

@* used listingdetails have to pass an eventcallback for breadcrumb nav-functionality vv *@
@* <ListingDetails CurrentListing="@Helpers.ListingHelper.GetListingFromListingID(4, dbContextFactory.CreateDbContext())" OnSearchResultsUpdated="HandleSearchResults" /> *@

@code {
    private List<Listing> searchResults = new List<Listing>(); // contains searchResults
    private List<Listing> sortedResults = new List<Listing>(); // contains sortResults
    private List<Listing> displayListings = new List<Listing>(); // contains the final result to be displayed

    private void HandleSearchResults(List<Listing> results)
    {
        searchResults = results; // Updates the list that is passed to ListingsDisplayAll

        if (sortedResults.Any())
        {
            CombineResults();
        }
        else
        {
            displayListings = searchResults;
        }
    } 

    private void HandleSorting(List<Listing> sortResults)
    {
        sortedResults = sortResults; // Updates the list that is passed to ListingsDisplayAll

        if (searchResults.Any())
        {
            CombineResults();    
        }
        else
        {
            displayListings = sortedResults;
        }
    }

    private void CombineResults()
    {
        // Determine the base list of listings to work with, depending on whether a search has been performed
        var filteredListings = searchResults.Any() ? searchResults : displayListings;

        // If there are sorted results, filter them further to ensure they match the current search results
        // (or all listings if no search is applied)
        if (sortedResults.Any())
        {
            displayListings = sortedResults.Where(l => filteredListings.Any(fl => fl.ID == l.ID)).ToList();
        }
        else
        {
            // If there are no sorted results, use the filtered listings (either search results or all listings) directly
            displayListings = filteredListings;
        }
    }
}
