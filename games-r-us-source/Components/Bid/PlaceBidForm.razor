@using games_r_us_source.Data;
@using games_r_us_source.Components.Helpers;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext dbContext;

<AuthorizeView>
	<Authorized>
		<p>@ErrorMessage</p>
		<EditForm class="w-fit" Model=@bid OnSubmit=@HandleSubmit>
			<div class="inline-block">
				<label for="amount" class="block text-center">
					New bid
				</label>
				<InputNumber id="amount" class="border-2 border-black" @bind-Value="@bid.Amount" />
			</div>
			<button class="border-2 rounded-l border-black bg-cyan-500" type="submit">Place bid</button>
		</EditForm>
	</Authorized>
	<NotAuthorized>
		<p>You need to be logged in to place a bid.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	[Parameter]
	public int ListingID { get; set; }

	private string UserName { get; set; }

	private string ErrorMessage { get; set; }

	Bid bid = new Bid { Time = DateTime.Now };

	private void HandleSubmit()
	{
		decimal highestBid = GetHighestBidAmountForCurrentListing(ListingID);

		if (highestBid >= bid.Amount)
		{
			ErrorMessage = "Bid amount is too low. Current highest bid: " + highestBid;
			return;
		}

		bid.ListingID = ListingID;
		bid.Listing = ListingHelper.GetListingFromListingID(ListingID, dbContext);

		ApplicationUser user = AccountHelper.GetAccountFromUserName(UserName, dbContext);
		bid.ApplicationUserID = user.Id;
		bid.ApplicationUser = user;
		dbContext.Bids.Add(bid);
		dbContext.SaveChanges();
	}

	protected override async Task OnInitializedAsync()
	{
		var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authenticationState.User;

		// Get the user's email if they are authenticated
		if (user.Identity.IsAuthenticated)
		{
			UserName = user.Identity.Name;
		}
	}

	private decimal GetHighestBidAmountForCurrentListing(int listingID)
	{
		decimal highestBidAmount = dbContext.Bids.Where(b => b.ListingID == listingID).Max(b => b.Amount);
		return highestBidAmount;
	}
}